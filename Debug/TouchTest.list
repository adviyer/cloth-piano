
TouchTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006410  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  080065d0  080065d0  000165d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067e8  080067e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080067e8  080067e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067e8  080067e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067e8  080067e8  000167e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067ec  080067ec  000167ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080067f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  2000000c  080067fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  080067fc  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011aba  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026bc  00000000  00000000  00031b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  000341f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d07  00000000  00000000  000352c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a928  00000000  00000000  00035fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001480d  00000000  00000000  000608f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001063a0  00000000  00000000  00075104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a38  00000000  00000000  0017b4a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  0017fedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080065b8 	.word	0x080065b8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	080065b8 	.word	0x080065b8

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_d2uiz>:
 8000afc:	004a      	lsls	r2, r1, #1
 8000afe:	d211      	bcs.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b04:	d211      	bcs.n	8000b2a <__aeabi_d2uiz+0x2e>
 8000b06:	d50d      	bpl.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b10:	d40e      	bmi.n	8000b30 <__aeabi_d2uiz+0x34>
 8000b12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_d2uiz+0x3a>
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2f>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b44:	bf24      	itt	cs
 8000b46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4e:	d90d      	bls.n	8000b6c <__aeabi_d2f+0x30>
 8000b50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b64:	bf08      	it	eq
 8000b66:	f020 0001 	biceq.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b70:	d121      	bne.n	8000bb6 <__aeabi_d2f+0x7a>
 8000b72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b76:	bfbc      	itt	lt
 8000b78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	4770      	bxlt	lr
 8000b7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b86:	f1c2 0218 	rsb	r2, r2, #24
 8000b8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b92:	fa20 f002 	lsr.w	r0, r0, r2
 8000b96:	bf18      	it	ne
 8000b98:	f040 0001 	orrne.w	r0, r0, #1
 8000b9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba8:	ea40 000c 	orr.w	r0, r0, ip
 8000bac:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb4:	e7cc      	b.n	8000b50 <__aeabi_d2f+0x14>
 8000bb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bba:	d107      	bne.n	8000bcc <__aeabi_d2f+0x90>
 8000bbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bca:	4770      	bxne	lr
 8000bcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	0000      	movs	r0, r0
	...

08000be0 <fill_freqs>:

extern DAC_HandleTypeDef hdac1;
extern TIM_HandleTypeDef htim4;

void fill_freqs()
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
	double freq = 55;
 8000be6:	f04f 0200 	mov.w	r2, #0
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <fill_freqs+0x80>)
 8000bec:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double m = pow(2, (double)1/12);
 8000bf0:	a319      	add	r3, pc, #100	; (adr r3, 8000c58 <fill_freqs+0x78>)
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	e9c7 2300 	strd	r2, r3, [r7]
	for (int i = 0; i < 48; i++) {
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	e016      	b.n	8000c2e <fill_freqs+0x4e>
		freqs[i] = (float) freq;
 8000c00:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c04:	f7ff ff9a 	bl	8000b3c <__aeabi_d2f>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	4916      	ldr	r1, [pc, #88]	; (8000c64 <fill_freqs+0x84>)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	440b      	add	r3, r1
 8000c12:	601a      	str	r2, [r3, #0]
		freq *= m;
 8000c14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c1c:	f7ff fcac 	bl	8000578 <__aeabi_dmul>
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
 8000c24:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (int i = 0; i < 48; i++) {
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	2b2f      	cmp	r3, #47	; 0x2f
 8000c32:	dde5      	ble.n	8000c00 <fill_freqs+0x20>
	}
	intr_freq = (int) freqs[47]*WAVE_SAMPLES;
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <fill_freqs+0x84>)
 8000c36:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8000c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c3e:	ee17 2a90 	vmov	r2, s15
 8000c42:	2364      	movs	r3, #100	; 0x64
 8000c44:	fb02 f303 	mul.w	r3, r2, r3
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <fill_freqs+0x88>)
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	f3af 8000 	nop.w
 8000c58:	92d97963 	.word	0x92d97963
 8000c5c:	3ff0f38f 	.word	0x3ff0f38f
 8000c60:	404b8000 	.word	0x404b8000
 8000c64:	20000028 	.word	0x20000028
 8000c68:	200002b8 	.word	0x200002b8
 8000c6c:	00000000 	.word	0x00000000

08000c70 <fill_sin_lut>:

void fill_sin_lut()
{
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
	// creates a sine wave look up table centered at VREF/2
	for(uint16_t i = 0; i < WAVE_SAMPLES; ++i) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	80fb      	strh	r3, [r7, #6]
 8000c7a:	e051      	b.n	8000d20 <fill_sin_lut+0xb0>
		sin_lut[i] = 0;
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	4a30      	ldr	r2, [pc, #192]	; (8000d40 <fill_sin_lut+0xd0>)
 8000c80:	2100      	movs	r1, #0
 8000c82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sin_lut[i] = (uint16_t) ( (sin( ((double) i)*360.0 / ((double) WAVE_SAMPLES)  * PI/180.0) * 2047) + 2048.0);
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fbfb 	bl	8000484 <__aeabi_ui2d>
 8000c8e:	f04f 0200 	mov.w	r2, #0
 8000c92:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <fill_sin_lut+0xd4>)
 8000c94:	f7ff fc70 	bl	8000578 <__aeabi_dmul>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4610      	mov	r0, r2
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f04f 0200 	mov.w	r2, #0
 8000ca4:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <fill_sin_lut+0xd8>)
 8000ca6:	f7ff fd91 	bl	80007cc <__aeabi_ddiv>
 8000caa:	4602      	mov	r2, r0
 8000cac:	460b      	mov	r3, r1
 8000cae:	4610      	mov	r0, r2
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	a31f      	add	r3, pc, #124	; (adr r3, 8000d30 <fill_sin_lut+0xc0>)
 8000cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb8:	f7ff fc5e 	bl	8000578 <__aeabi_dmul>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 0200 	mov.w	r2, #0
 8000cc8:	4b20      	ldr	r3, [pc, #128]	; (8000d4c <fill_sin_lut+0xdc>)
 8000cca:	f7ff fd7f 	bl	80007cc <__aeabi_ddiv>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	ec43 2b17 	vmov	d7, r2, r3
 8000cd6:	eeb0 0a47 	vmov.f32	s0, s14
 8000cda:	eef0 0a67 	vmov.f32	s1, s15
 8000cde:	f004 fc2b 	bl	8005538 <sin>
 8000ce2:	ec51 0b10 	vmov	r0, r1, d0
 8000ce6:	a314      	add	r3, pc, #80	; (adr r3, 8000d38 <fill_sin_lut+0xc8>)
 8000ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cec:	f7ff fc44 	bl	8000578 <__aeabi_dmul>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f04f 0200 	mov.w	r2, #0
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <fill_sin_lut+0xe0>)
 8000cfe:	f7ff fa85 	bl	800020c <__adddf3>
 8000d02:	4602      	mov	r2, r0
 8000d04:	460b      	mov	r3, r1
 8000d06:	88fc      	ldrh	r4, [r7, #6]
 8000d08:	4610      	mov	r0, r2
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f7ff fef6 	bl	8000afc <__aeabi_d2uiz>
 8000d10:	4603      	mov	r3, r0
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <fill_sin_lut+0xd0>)
 8000d16:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(uint16_t i = 0; i < WAVE_SAMPLES; ++i) {
 8000d1a:	88fb      	ldrh	r3, [r7, #6]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	80fb      	strh	r3, [r7, #6]
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	2b63      	cmp	r3, #99	; 0x63
 8000d24:	d9aa      	bls.n	8000c7c <fill_sin_lut+0xc>
		for (int j = 0; j < NUM_HARM; j++) {
			sin_lut[i] += (uint16_t)((double)(sin(2 * PI/180.0 * ((double) j + 1)/WAVE_SAMPLES) * harmonic_amps[j]) + 1) * 2047;
		}
		*/
	}
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd90      	pop	{r4, r7, pc}
 8000d30:	53c8d4f1 	.word	0x53c8d4f1
 8000d34:	400921fb 	.word	0x400921fb
 8000d38:	00000000 	.word	0x00000000
 8000d3c:	409ffc00 	.word	0x409ffc00
 8000d40:	200001f0 	.word	0x200001f0
 8000d44:	40768000 	.word	0x40768000
 8000d48:	40590000 	.word	0x40590000
 8000d4c:	40668000 	.word	0x40668000
 8000d50:	40a00000 	.word	0x40a00000

08000d54 <add_note>:

void add_note(int note_idx)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	if (ctx.num_notes >= MAX_NOTES) {
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <add_note+0x84>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b0f      	cmp	r3, #15
 8000d62:	dc32      	bgt.n	8000dca <add_note+0x76>
		// ERROR or remove lowest amp note??
		return;
	}
	ctx.notes[ctx.num_notes] = note_idx;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <add_note+0x84>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <add_note+0x84>)
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	605a      	str	r2, [r3, #4]
	ctx.amps[ctx.num_notes] = 0.69;
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <add_note+0x84>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a18      	ldr	r2, [pc, #96]	; (8000dd8 <add_note+0x84>)
 8000d78:	3330      	adds	r3, #48	; 0x30
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	3304      	adds	r3, #4
 8000d80:	4a16      	ldr	r2, [pc, #88]	; (8000ddc <add_note+0x88>)
 8000d82:	601a      	str	r2, [r3, #0]
	ctx.cycles[ctx.num_notes] = 0;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <add_note+0x84>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <add_note+0x84>)
 8000d8a:	3310      	adds	r3, #16
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
	ctx.cycles_per_wave[ctx.num_notes] = intr_freq / (int) freqs[note_idx];
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <add_note+0x8c>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4912      	ldr	r1, [pc, #72]	; (8000de4 <add_note+0x90>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	440b      	add	r3, r1
 8000da0:	edd3 7a00 	vldr	s15, [r3]
 8000da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000da8:	ee17 1a90 	vmov	r1, s15
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <add_note+0x84>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	fb92 f2f1 	sdiv	r2, r2, r1
 8000db4:	4908      	ldr	r1, [pc, #32]	; (8000dd8 <add_note+0x84>)
 8000db6:	3320      	adds	r3, #32
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	440b      	add	r3, r1
 8000dbc:	605a      	str	r2, [r3, #4]

	ctx.num_notes++;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <add_note+0x84>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <add_note+0x84>)
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	e000      	b.n	8000dcc <add_note+0x78>
		return;
 8000dca:	bf00      	nop
}
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200000e8 	.word	0x200000e8
 8000ddc:	3f30a3d7 	.word	0x3f30a3d7
 8000de0:	200002b8 	.word	0x200002b8
 8000de4:	20000028 	.word	0x20000028

08000de8 <init_audio_ctx>:
		}
	}
}

void init_audio_ctx()
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	fill_freqs();
 8000dec:	f7ff fef8 	bl	8000be0 <fill_freqs>
	fill_sin_lut();
 8000df0:	f7ff ff3e 	bl	8000c70 <fill_sin_lut>
	memset(&ctx, 0, sizeof(ctx));
 8000df4:	f44f 7284 	mov.w	r2, #264	; 0x108
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4802      	ldr	r0, [pc, #8]	; (8000e04 <init_audio_ctx+0x1c>)
 8000dfc:	f004 fb6e 	bl	80054dc <memset>
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200000e8 	.word	0x200000e8

08000e08 <audio_tim_isr>:

void audio_tim_isr()
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
	uint32_t index;
	float dac_out = 0;
 8000e0e:	f04f 0300 	mov.w	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < ctx.num_notes; i++) {
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	e044      	b.n	8000ea4 <audio_tim_isr+0x9c>
		ctx.cycles[i] = (ctx.cycles[i] + 1) % ctx.cycles_per_wave[i];
 8000e1a:	4a2c      	ldr	r2, [pc, #176]	; (8000ecc <audio_tim_isr+0xc4>)
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	3310      	adds	r3, #16
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	1c5a      	adds	r2, r3, #1
 8000e28:	4928      	ldr	r1, [pc, #160]	; (8000ecc <audio_tim_isr+0xc4>)
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	3320      	adds	r3, #32
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	440b      	add	r3, r1
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	fb92 f1f3 	sdiv	r1, r2, r3
 8000e38:	fb01 f303 	mul.w	r3, r1, r3
 8000e3c:	1ad2      	subs	r2, r2, r3
 8000e3e:	4923      	ldr	r1, [pc, #140]	; (8000ecc <audio_tim_isr+0xc4>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	3310      	adds	r3, #16
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	440b      	add	r3, r1
 8000e48:	605a      	str	r2, [r3, #4]
		index = ctx.cycles[i] * WAVE_SAMPLES / ctx.cycles_per_wave[i];
 8000e4a:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <audio_tim_isr+0xc4>)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	3310      	adds	r3, #16
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2264      	movs	r2, #100	; 0x64
 8000e58:	fb03 f202 	mul.w	r2, r3, r2
 8000e5c:	491b      	ldr	r1, [pc, #108]	; (8000ecc <audio_tim_isr+0xc4>)
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	3320      	adds	r3, #32
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	440b      	add	r3, r1
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e6c:	607b      	str	r3, [r7, #4]
		dac_out += ctx.amps[i] * sin_lut[index];
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <audio_tim_isr+0xc4>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	3330      	adds	r3, #48	; 0x30
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	3304      	adds	r3, #4
 8000e7a:	ed93 7a00 	vldr	s14, [r3]
 8000e7e:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <audio_tim_isr+0xc8>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e86:	ee07 3a90 	vmov	s15, r3
 8000e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e92:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e9a:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < ctx.num_notes; i++) {
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <audio_tim_isr+0xc4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	68ba      	ldr	r2, [r7, #8]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	dbb5      	blt.n	8000e1a <audio_tim_isr+0x12>
	}
	//update_amps();
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t) dac_out);
 8000eae:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eb6:	ee17 3a90 	vmov	r3, s15
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <audio_tim_isr+0xcc>)
 8000ec0:	f001 f861 	bl	8001f86 <HAL_DAC_SetValue>
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	200000e8 	.word	0x200000e8
 8000ed0:	200001f0 	.word	0x200001f0
 8000ed4:	200002bc 	.word	0x200002bc

08000ed8 <init_timer>:

void init_timer(TIM_HandleTypeDef *htim)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(&htim4);
 8000ee0:	4814      	ldr	r0, [pc, #80]	; (8000f34 <init_timer+0x5c>)
 8000ee2:	f003 fe8c 	bl	8004bfe <HAL_TIM_Base_Stop>
	htim4.Instance = TIM4;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <init_timer+0x5c>)
 8000ee8:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <init_timer+0x60>)
 8000eea:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = PRESCALER;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <init_timer+0x5c>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <init_timer+0x5c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = (uint32_t) (BASE_CLK/ (PRESCALER+1)/((float)WAVE_SAMPLES)/freqs[47]);
 8000ef8:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <init_timer+0x64>)
 8000efa:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 8000efe:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000f40 <init_timer+0x68>
 8000f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f0a:	ee17 2a90 	vmov	r2, s15
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <init_timer+0x5c>)
 8000f10:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <init_timer+0x5c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <init_timer+0x5c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <init_timer+0x5c>)
 8000f20:	f003 fe16 	bl	8004b50 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim4);
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <init_timer+0x5c>)
 8000f26:	f003 fe91 	bl	8004c4c <HAL_TIM_Base_Start_IT>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000324 	.word	0x20000324
 8000f38:	40000800 	.word	0x40000800
 8000f3c:	20000028 	.word	0x20000028
 8000f40:	469c4000 	.word	0x469c4000

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4a:	f000 fdfe 	bl	8001b4a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4e:	f000 f829 	bl	8000fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f52:	f000 f92d 	bl	80011b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f56:	f000 f89f 	bl	8001098 <MX_I2C1_Init>
  MX_DAC1_Init();
 8000f5a:	f000 f869 	bl	8001030 <MX_DAC1_Init>
  MX_TIM4_Init();
 8000f5e:	f000 f8d9 	bl	8001114 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  for (uint8_t addr = 0x5A; addr <= 0x5B; addr++) {
 8000f62:	235a      	movs	r3, #90	; 0x5a
 8000f64:	71fb      	strb	r3, [r7, #7]
 8000f66:	e006      	b.n	8000f76 <main+0x32>
  	  if (mpr121_init(addr) != 0) {
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fb6f 	bl	800164e <mpr121_init>
  for (uint8_t addr = 0x5A; addr <= 0x5B; addr++) {
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	3301      	adds	r3, #1
 8000f74:	71fb      	strb	r3, [r7, #7]
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2b5b      	cmp	r3, #91	; 0x5b
 8000f7a:	d9f5      	bls.n	8000f68 <main+0x24>
  		  // TBD: ERROR
  	  }
  }

  // Initialize DAC
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0x0);
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <main+0x5c>)
 8000f84:	f000 ffff 	bl	8001f86 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <main+0x5c>)
 8000f8c:	f000 ffa9 	bl	8001ee2 <HAL_DAC_Start>


  // Initialize audio stuff
  init_audio_ctx();
 8000f90:	f7ff ff2a 	bl	8000de8 <init_audio_ctx>

  add_note(24);
 8000f94:	2018      	movs	r0, #24
 8000f96:	f7ff fedd 	bl	8000d54 <add_note>
  init_timer();
 8000f9a:	f7ff ff9d 	bl	8000ed8 <init_timer>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <main+0x5a>
 8000fa0:	200002bc 	.word	0x200002bc

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b096      	sub	sp, #88	; 0x58
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	2244      	movs	r2, #68	; 0x44
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f004 fa92 	bl	80054dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	463b      	mov	r3, r7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fc6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fca:	f002 f949 	bl	8003260 <HAL_PWREx_ControlVoltageScaling>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fd4:	f000 fb36 	bl	8001644 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000fd8:	2310      	movs	r3, #16
 8000fda:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fe4:	2360      	movs	r3, #96	; 0x60
 8000fe6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 f9e9 	bl	80033c8 <HAL_RCC_OscConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000ffc:	f000 fb22 	bl	8001644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001000:	230f      	movs	r3, #15
 8001002:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001014:	463b      	mov	r3, r7
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f002 fdef 	bl	8003bfc <HAL_RCC_ClockConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001024:	f000 fb0e 	bl	8001644 <Error_Handler>
  }
}
 8001028:	bf00      	nop
 800102a:	3758      	adds	r7, #88	; 0x58
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001036:	463b      	mov	r3, r7
 8001038:	2228      	movs	r2, #40	; 0x28
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f004 fa4d 	bl	80054dc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <MX_DAC1_Init+0x60>)
 8001044:	4a13      	ldr	r2, [pc, #76]	; (8001094 <MX_DAC1_Init+0x64>)
 8001046:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001048:	4811      	ldr	r0, [pc, #68]	; (8001090 <MX_DAC1_Init+0x60>)
 800104a:	f000 ff28 	bl	8001e9e <HAL_DAC_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001054:	f000 faf6 	bl	8001644 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <MX_DAC1_Init+0x60>)
 8001078:	f000 ffaa 	bl	8001fd0 <HAL_DAC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 8001082:	f000 fadf 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200002bc 	.word	0x200002bc
 8001094:	40007400 	.word	0x40007400

08001098 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_I2C1_Init+0x74>)
 800109e:	4a1c      	ldr	r2, [pc, #112]	; (8001110 <MX_I2C1_Init+0x78>)
 80010a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_I2C1_Init+0x74>)
 80010a4:	f640 6214 	movw	r2, #3604	; 0xe14
 80010a8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_I2C1_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <MX_I2C1_Init+0x74>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_I2C1_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <MX_I2C1_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <MX_I2C1_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c8:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_I2C1_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_I2C1_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <MX_I2C1_Init+0x74>)
 80010d6:	f001 fa89 	bl	80025ec <HAL_I2C_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010e0:	f000 fab0 	bl	8001644 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010e4:	2100      	movs	r1, #0
 80010e6:	4809      	ldr	r0, [pc, #36]	; (800110c <MX_I2C1_Init+0x74>)
 80010e8:	f002 f802 	bl	80030f0 <HAL_I2CEx_ConfigAnalogFilter>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80010f2:	f000 faa7 	bl	8001644 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010f6:	2100      	movs	r1, #0
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <MX_I2C1_Init+0x74>)
 80010fa:	f002 f844 	bl	8003186 <HAL_I2CEx_ConfigDigitalFilter>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001104:	f000 fa9e 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200002d0 	.word	0x200002d0
 8001110:	40005400 	.word	0x40005400

08001114 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001132:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <MX_TIM4_Init+0x94>)
 8001134:	4a1d      	ldr	r2, [pc, #116]	; (80011ac <MX_TIM4_Init+0x98>)
 8001136:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <MX_TIM4_Init+0x94>)
 800113a:	2200      	movs	r2, #0
 800113c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <MX_TIM4_Init+0x94>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001144:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <MX_TIM4_Init+0x94>)
 8001146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800114a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <MX_TIM4_Init+0x94>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_TIM4_Init+0x94>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001158:	4813      	ldr	r0, [pc, #76]	; (80011a8 <MX_TIM4_Init+0x94>)
 800115a:	f003 fcf9 	bl	8004b50 <HAL_TIM_Base_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001164:	f000 fa6e 	bl	8001644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	4619      	mov	r1, r3
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <MX_TIM4_Init+0x94>)
 8001176:	f003 fedb 	bl	8004f30 <HAL_TIM_ConfigClockSource>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001180:	f000 fa60 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_TIM4_Init+0x94>)
 8001192:	f004 f8fd 	bl	8005390 <HAL_TIMEx_MasterConfigSynchronization>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800119c:	f000 fa52 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	3720      	adds	r7, #32
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000324 	.word	0x20000324
 80011ac:	40000800 	.word	0x40000800

080011b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08e      	sub	sp, #56	; 0x38
 80011b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011c6:	4bb3      	ldr	r3, [pc, #716]	; (8001494 <MX_GPIO_Init+0x2e4>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	4ab2      	ldr	r2, [pc, #712]	; (8001494 <MX_GPIO_Init+0x2e4>)
 80011cc:	f043 0310 	orr.w	r3, r3, #16
 80011d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d2:	4bb0      	ldr	r3, [pc, #704]	; (8001494 <MX_GPIO_Init+0x2e4>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	f003 0310 	and.w	r3, r3, #16
 80011da:	623b      	str	r3, [r7, #32]
 80011dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011de:	4bad      	ldr	r3, [pc, #692]	; (8001494 <MX_GPIO_Init+0x2e4>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	4aac      	ldr	r2, [pc, #688]	; (8001494 <MX_GPIO_Init+0x2e4>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ea:	4baa      	ldr	r3, [pc, #680]	; (8001494 <MX_GPIO_Init+0x2e4>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011f6:	4ba7      	ldr	r3, [pc, #668]	; (8001494 <MX_GPIO_Init+0x2e4>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	4aa6      	ldr	r2, [pc, #664]	; (8001494 <MX_GPIO_Init+0x2e4>)
 80011fc:	f043 0320 	orr.w	r3, r3, #32
 8001200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001202:	4ba4      	ldr	r3, [pc, #656]	; (8001494 <MX_GPIO_Init+0x2e4>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	f003 0320 	and.w	r3, r3, #32
 800120a:	61bb      	str	r3, [r7, #24]
 800120c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120e:	4ba1      	ldr	r3, [pc, #644]	; (8001494 <MX_GPIO_Init+0x2e4>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	4aa0      	ldr	r2, [pc, #640]	; (8001494 <MX_GPIO_Init+0x2e4>)
 8001214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121a:	4b9e      	ldr	r3, [pc, #632]	; (8001494 <MX_GPIO_Init+0x2e4>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	4b9b      	ldr	r3, [pc, #620]	; (8001494 <MX_GPIO_Init+0x2e4>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	4a9a      	ldr	r2, [pc, #616]	; (8001494 <MX_GPIO_Init+0x2e4>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001232:	4b98      	ldr	r3, [pc, #608]	; (8001494 <MX_GPIO_Init+0x2e4>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	4b95      	ldr	r3, [pc, #596]	; (8001494 <MX_GPIO_Init+0x2e4>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	4a94      	ldr	r2, [pc, #592]	; (8001494 <MX_GPIO_Init+0x2e4>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124a:	4b92      	ldr	r3, [pc, #584]	; (8001494 <MX_GPIO_Init+0x2e4>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001256:	4b8f      	ldr	r3, [pc, #572]	; (8001494 <MX_GPIO_Init+0x2e4>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a8e      	ldr	r2, [pc, #568]	; (8001494 <MX_GPIO_Init+0x2e4>)
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001262:	4b8c      	ldr	r3, [pc, #560]	; (8001494 <MX_GPIO_Init+0x2e4>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800126e:	4b89      	ldr	r3, [pc, #548]	; (8001494 <MX_GPIO_Init+0x2e4>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	4a88      	ldr	r2, [pc, #544]	; (8001494 <MX_GPIO_Init+0x2e4>)
 8001274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127a:	4b86      	ldr	r3, [pc, #536]	; (8001494 <MX_GPIO_Init+0x2e4>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001286:	f002 f88f 	bl	80033a8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	2180      	movs	r1, #128	; 0x80
 800128e:	4882      	ldr	r0, [pc, #520]	; (8001498 <MX_GPIO_Init+0x2e8>)
 8001290:	f001 f97c 	bl	800258c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001294:	230c      	movs	r3, #12
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80012a4:	230d      	movs	r3, #13
 80012a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ac:	4619      	mov	r1, r3
 80012ae:	487b      	ldr	r0, [pc, #492]	; (800149c <MX_GPIO_Init+0x2ec>)
 80012b0:	f000 ffda 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80012b4:	2307      	movs	r3, #7
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b8:	2312      	movs	r3, #18
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012c4:	2304      	movs	r3, #4
 80012c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012cc:	4619      	mov	r1, r3
 80012ce:	4874      	ldr	r0, [pc, #464]	; (80014a0 <MX_GPIO_Init+0x2f0>)
 80012d0:	f000 ffca 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80012e4:	230d      	movs	r3, #13
 80012e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ec:	4619      	mov	r1, r3
 80012ee:	486c      	ldr	r0, [pc, #432]	; (80014a0 <MX_GPIO_Init+0x2f0>)
 80012f0:	f000 ffba 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80012f4:	233f      	movs	r3, #63	; 0x3f
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012f8:	230b      	movs	r3, #11
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001304:	4619      	mov	r1, r3
 8001306:	4867      	ldr	r0, [pc, #412]	; (80014a4 <MX_GPIO_Init+0x2f4>)
 8001308:	f000 ffae 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800130c:	2301      	movs	r3, #1
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800131c:	2301      	movs	r3, #1
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001324:	4619      	mov	r1, r3
 8001326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132a:	f000 ff9d 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800132e:	230a      	movs	r3, #10
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001332:	230b      	movs	r3, #11
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001344:	f000 ff90 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001348:	2320      	movs	r3, #32
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001358:	2305      	movs	r3, #5
 800135a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001360:	4619      	mov	r1, r3
 8001362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001366:	f000 ff7f 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800136a:	23c0      	movs	r3, #192	; 0xc0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800136e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137c:	4619      	mov	r1, r3
 800137e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001382:	f000 ff71 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001386:	2301      	movs	r3, #1
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001396:	2302      	movs	r3, #2
 8001398:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139e:	4619      	mov	r1, r3
 80013a0:	483d      	ldr	r0, [pc, #244]	; (8001498 <MX_GPIO_Init+0x2e8>)
 80013a2:	f000 ff61 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013a6:	2302      	movs	r3, #2
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013aa:	230b      	movs	r3, #11
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b6:	4619      	mov	r1, r3
 80013b8:	4837      	ldr	r0, [pc, #220]	; (8001498 <MX_GPIO_Init+0x2e8>)
 80013ba:	f000 ff55 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80013be:	2344      	movs	r3, #68	; 0x44
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c2:	2303      	movs	r3, #3
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ce:	4619      	mov	r1, r3
 80013d0:	4831      	ldr	r0, [pc, #196]	; (8001498 <MX_GPIO_Init+0x2e8>)
 80013d2:	f000 ff49 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80013d6:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f0:	4619      	mov	r1, r3
 80013f2:	482a      	ldr	r0, [pc, #168]	; (800149c <MX_GPIO_Init+0x2ec>)
 80013f4:	f000 ff38 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80013f8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800140a:	2303      	movs	r3, #3
 800140c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800140e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001412:	4619      	mov	r1, r3
 8001414:	4821      	ldr	r0, [pc, #132]	; (800149c <MX_GPIO_Init+0x2ec>)
 8001416:	f000 ff27 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800141a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800142c:	2301      	movs	r3, #1
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001434:	4619      	mov	r1, r3
 8001436:	4818      	ldr	r0, [pc, #96]	; (8001498 <MX_GPIO_Init+0x2e8>)
 8001438:	f000 ff16 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800143c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800144e:	230d      	movs	r3, #13
 8001450:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001456:	4619      	mov	r1, r3
 8001458:	480f      	ldr	r0, [pc, #60]	; (8001498 <MX_GPIO_Init+0x2e8>)
 800145a:	f000 ff05 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800145e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001470:	230e      	movs	r3, #14
 8001472:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001478:	4619      	mov	r1, r3
 800147a:	4807      	ldr	r0, [pc, #28]	; (8001498 <MX_GPIO_Init+0x2e8>)
 800147c:	f000 fef4 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001480:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	e00a      	b.n	80014a8 <MX_GPIO_Init+0x2f8>
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000
 8001498:	48000400 	.word	0x48000400
 800149c:	48001000 	.word	0x48001000
 80014a0:	48001400 	.word	0x48001400
 80014a4:	48000800 	.word	0x48000800
 80014a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014aa:	2307      	movs	r3, #7
 80014ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	4619      	mov	r1, r3
 80014b4:	485f      	ldr	r0, [pc, #380]	; (8001634 <MX_GPIO_Init+0x484>)
 80014b6:	f000 fed7 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80014ba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80014cc:	2308      	movs	r3, #8
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	4619      	mov	r1, r3
 80014d6:	4858      	ldr	r0, [pc, #352]	; (8001638 <MX_GPIO_Init+0x488>)
 80014d8:	f000 fec6 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014dc:	2340      	movs	r3, #64	; 0x40
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80014ec:	230d      	movs	r3, #13
 80014ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f4:	4619      	mov	r1, r3
 80014f6:	4851      	ldr	r0, [pc, #324]	; (800163c <MX_GPIO_Init+0x48c>)
 80014f8:	f000 feb6 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800150c:	2302      	movs	r3, #2
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001514:	4619      	mov	r1, r3
 8001516:	4849      	ldr	r0, [pc, #292]	; (800163c <MX_GPIO_Init+0x48c>)
 8001518:	f000 fea6 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800151c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800152e:	230c      	movs	r3, #12
 8001530:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001536:	4619      	mov	r1, r3
 8001538:	4840      	ldr	r0, [pc, #256]	; (800163c <MX_GPIO_Init+0x48c>)
 800153a:	f000 fe95 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800153e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001550:	230a      	movs	r3, #10
 8001552:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001558:	4619      	mov	r1, r3
 800155a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155e:	f000 fe83 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001574:	4619      	mov	r1, r3
 8001576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157a:	f000 fe75 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800157e:	2301      	movs	r3, #1
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800158e:	2309      	movs	r3, #9
 8001590:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001596:	4619      	mov	r1, r3
 8001598:	4826      	ldr	r0, [pc, #152]	; (8001634 <MX_GPIO_Init+0x484>)
 800159a:	f000 fe65 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800159e:	2304      	movs	r3, #4
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015ae:	230c      	movs	r3, #12
 80015b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b6:	4619      	mov	r1, r3
 80015b8:	481e      	ldr	r0, [pc, #120]	; (8001634 <MX_GPIO_Init+0x484>)
 80015ba:	f000 fe55 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80015be:	2378      	movs	r3, #120	; 0x78
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ce:	2307      	movs	r3, #7
 80015d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	4816      	ldr	r0, [pc, #88]	; (8001634 <MX_GPIO_Init+0x484>)
 80015da:	f000 fe45 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80015de:	2338      	movs	r3, #56	; 0x38
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ea:	2303      	movs	r3, #3
 80015ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015ee:	2306      	movs	r3, #6
 80015f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f6:	4619      	mov	r1, r3
 80015f8:	4811      	ldr	r0, [pc, #68]	; (8001640 <MX_GPIO_Init+0x490>)
 80015fa:	f000 fe35 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001612:	4619      	mov	r1, r3
 8001614:	480a      	ldr	r0, [pc, #40]	; (8001640 <MX_GPIO_Init+0x490>)
 8001616:	f000 fe27 	bl	8002268 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	2017      	movs	r0, #23
 8001620:	f000 fc07 	bl	8001e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001624:	2017      	movs	r0, #23
 8001626:	f000 fc20 	bl	8001e6a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800162a:	bf00      	nop
 800162c:	3738      	adds	r7, #56	; 0x38
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	48000c00 	.word	0x48000c00
 8001638:	48001800 	.word	0x48001800
 800163c:	48000800 	.word	0x48000800
 8001640:	48000400 	.word	0x48000400

08001644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001648:	b672      	cpsid	i
}
 800164a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800164c:	e7fe      	b.n	800164c <Error_Handler+0x8>

0800164e <mpr121_init>:
#define RELEASE_THRESHOLD 0x0A

extern I2C_HandleTypeDef hi2c1;

int mpr121_init(uint8_t addr)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	// resetting ECR
	data = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	73fb      	strb	r3, [r7, #15]
	if (mpr121_write(addr, ECR, &data, 1) != 0) {
 800165c:	f107 020f 	add.w	r2, r7, #15
 8001660:	79f8      	ldrb	r0, [r7, #7]
 8001662:	2301      	movs	r3, #1
 8001664:	215e      	movs	r1, #94	; 0x5e
 8001666:	f000 f899 	bl	800179c <mpr121_write>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <mpr121_init+0x28>
		return -1;
 8001670:	f04f 33ff 	mov.w	r3, #4294967295
 8001674:	e03d      	b.n	80016f2 <mpr121_init+0xa4>
	}

	// soft resetting
	data = RST_VAL;
 8001676:	2363      	movs	r3, #99	; 0x63
 8001678:	73fb      	strb	r3, [r7, #15]
	if (mpr121_write(addr, SOFT_RST, &data, 1)) {
 800167a:	f107 020f 	add.w	r2, r7, #15
 800167e:	79f8      	ldrb	r0, [r7, #7]
 8001680:	2301      	movs	r3, #1
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	f000 f88a 	bl	800179c <mpr121_write>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <mpr121_init+0x46>
		return -1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	e02e      	b.n	80016f2 <mpr121_init+0xa4>
	}
	HAL_Delay(1);
 8001694:	2001      	movs	r0, #1
 8001696:	f000 facd 	bl	8001c34 <HAL_Delay>

	// checking whether reset actually worked by reading config reg 2's default value
	if (mpr121_read(addr, 0x5d, &data, 1) || data != 0x24) {
 800169a:	f107 020f 	add.w	r2, r7, #15
 800169e:	79f8      	ldrb	r0, [r7, #7]
 80016a0:	2301      	movs	r3, #1
 80016a2:	215d      	movs	r1, #93	; 0x5d
 80016a4:	f000 f854 	bl	8001750 <mpr121_read>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d102      	bne.n	80016b4 <mpr121_init+0x66>
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	2b24      	cmp	r3, #36	; 0x24
 80016b2:	d002      	beq.n	80016ba <mpr121_init+0x6c>
		return -1;
 80016b4:	f04f 33ff 	mov.w	r3, #4294967295
 80016b8:	e01b      	b.n	80016f2 <mpr121_init+0xa4>
	}

	// set default touch and release thresholds
	if (mpr121_set_thresholds(addr, TOUCH_THRESHOLD, RELEASE_THRESHOLD)) {
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	220a      	movs	r2, #10
 80016be:	2108      	movs	r1, #8
 80016c0:	4618      	mov	r0, r3
 80016c2:	f000 f81a 	bl	80016fa <mpr121_set_thresholds>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <mpr121_init+0x84>
		return -1;
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295
 80016d0:	e00f      	b.n	80016f2 <mpr121_init+0xa4>
	}

	// Enabling all electrodes with baseline tracking upon initialisation
	data = ECR_ALL_ENABLE;
 80016d2:	238c      	movs	r3, #140	; 0x8c
 80016d4:	73fb      	strb	r3, [r7, #15]
	if (mpr121_write(addr, ECR, &data, 1)) {
 80016d6:	f107 020f 	add.w	r2, r7, #15
 80016da:	79f8      	ldrb	r0, [r7, #7]
 80016dc:	2301      	movs	r3, #1
 80016de:	215e      	movs	r1, #94	; 0x5e
 80016e0:	f000 f85c 	bl	800179c <mpr121_write>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d002      	beq.n	80016f0 <mpr121_init+0xa2>
		return -1;
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
 80016ee:	e000      	b.n	80016f2 <mpr121_init+0xa4>
	}

	return 0;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <mpr121_set_thresholds>:

int mpr121_set_thresholds(uint8_t addr, uint8_t touch, uint8_t release)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	71fb      	strb	r3, [r7, #7]
 8001704:	460b      	mov	r3, r1
 8001706:	71bb      	strb	r3, [r7, #6]
 8001708:	4613      	mov	r3, r2
 800170a:	717b      	strb	r3, [r7, #5]
	uint8_t thresholds[] = {touch, release};
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	723b      	strb	r3, [r7, #8]
 8001710:	797b      	ldrb	r3, [r7, #5]
 8001712:	727b      	strb	r3, [r7, #9]
	for (int i = 0; i < NUM_ELECS; i += 2) {
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e012      	b.n	8001740 <mpr121_set_thresholds+0x46>
		if (mpr121_write(addr, 0x41 + i, thresholds, 2)) {
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	3341      	adds	r3, #65	; 0x41
 8001720:	b2d9      	uxtb	r1, r3
 8001722:	f107 0208 	add.w	r2, r7, #8
 8001726:	79f8      	ldrb	r0, [r7, #7]
 8001728:	2302      	movs	r3, #2
 800172a:	f000 f837 	bl	800179c <mpr121_write>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <mpr121_set_thresholds+0x40>
			return -1;
 8001734:	f04f 33ff 	mov.w	r3, #4294967295
 8001738:	e006      	b.n	8001748 <mpr121_set_thresholds+0x4e>
	for (int i = 0; i < NUM_ELECS; i += 2) {
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	3302      	adds	r3, #2
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b0b      	cmp	r3, #11
 8001744:	dde9      	ble.n	800171a <mpr121_set_thresholds+0x20>
		}
	}
	return 0;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <mpr121_read>:

int mpr121_read(uint8_t addr, uint8_t reg_addr, uint8_t *data, int size)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af04      	add	r7, sp, #16
 8001756:	60ba      	str	r2, [r7, #8]
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	4603      	mov	r3, r0
 800175c:	73fb      	strb	r3, [r7, #15]
 800175e:	460b      	mov	r3, r1
 8001760:	73bb      	strb	r3, [r7, #14]
	return HAL_I2C_Mem_Read(&hi2c1, (addr << 1) | 1, reg_addr, 1, data, size, HAL_MAX_DELAY);
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	b21b      	sxth	r3, r3
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	b21b      	sxth	r3, r3
 800176e:	b299      	uxth	r1, r3
 8001770:	7bbb      	ldrb	r3, [r7, #14]
 8001772:	b29a      	uxth	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	b29b      	uxth	r3, r3
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	9002      	str	r0, [sp, #8]
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2301      	movs	r3, #1
 8001786:	4804      	ldr	r0, [pc, #16]	; (8001798 <mpr121_read+0x48>)
 8001788:	f001 f8e0 	bl	800294c <HAL_I2C_Mem_Read>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200002d0 	.word	0x200002d0

0800179c <mpr121_write>:

int mpr121_write(uint8_t addr, uint8_t reg_addr, uint8_t *data, int size)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af04      	add	r7, sp, #16
 80017a2:	60ba      	str	r2, [r7, #8]
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	4603      	mov	r3, r0
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	460b      	mov	r3, r1
 80017ac:	73bb      	strb	r3, [r7, #14]
	I2C_HandleTypeDef *sdf = &hi2c1;
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <mpr121_write+0x44>)
 80017b0:	617b      	str	r3, [r7, #20]
	return HAL_I2C_Mem_Write(&hi2c1, (addr << 1), reg_addr, 1, data, size, HAL_MAX_DELAY);
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	b299      	uxth	r1, r3
 80017ba:	7bbb      	ldrb	r3, [r7, #14]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	f04f 30ff 	mov.w	r0, #4294967295
 80017c6:	9002      	str	r0, [sp, #8]
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2301      	movs	r3, #1
 80017d0:	4803      	ldr	r0, [pc, #12]	; (80017e0 <mpr121_write+0x44>)
 80017d2:	f000 ffa7 	bl	8002724 <HAL_I2C_Mem_Write>
 80017d6:	4603      	mov	r3, r0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	200002d0 	.word	0x200002d0

080017e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <HAL_MspInit+0x44>)
 80017ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ee:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <HAL_MspInit+0x44>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6613      	str	r3, [r2, #96]	; 0x60
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_MspInit+0x44>)
 80017f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_MspInit+0x44>)
 8001804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001806:	4a08      	ldr	r2, [pc, #32]	; (8001828 <HAL_MspInit+0x44>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180c:	6593      	str	r3, [r2, #88]	; 0x58
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_MspInit+0x44>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000

0800182c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a15      	ldr	r2, [pc, #84]	; (80018a0 <HAL_DAC_MspInit+0x74>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d124      	bne.n	8001898 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <HAL_DAC_MspInit+0x78>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <HAL_DAC_MspInit+0x78>)
 8001854:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001858:	6593      	str	r3, [r2, #88]	; 0x58
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_DAC_MspInit+0x78>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <HAL_DAC_MspInit+0x78>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	4a0e      	ldr	r2, [pc, #56]	; (80018a4 <HAL_DAC_MspInit+0x78>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <HAL_DAC_MspInit+0x78>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800187e:	2310      	movs	r3, #16
 8001880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001882:	2303      	movs	r3, #3
 8001884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001894:	f000 fce8 	bl	8002268 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001898:	bf00      	nop
 800189a:	3728      	adds	r7, #40	; 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40007400 	.word	0x40007400
 80018a4:	40021000 	.word	0x40021000

080018a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b0ae      	sub	sp, #184	; 0xb8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	2294      	movs	r2, #148	; 0x94
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f003 fe07 	bl	80054dc <memset>
  if(hi2c->Instance==I2C1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a21      	ldr	r2, [pc, #132]	; (8001958 <HAL_I2C_MspInit+0xb0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d13b      	bne.n	8001950 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018d8:	2340      	movs	r3, #64	; 0x40
 80018da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018dc:	2300      	movs	r3, #0
 80018de:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	4618      	mov	r0, r3
 80018e6:	f002 fc1b 	bl	8004120 <HAL_RCCEx_PeriphCLKConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80018f0:	f7ff fea8 	bl	8001644 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <HAL_I2C_MspInit+0xb4>)
 80018f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f8:	4a18      	ldr	r2, [pc, #96]	; (800195c <HAL_I2C_MspInit+0xb4>)
 80018fa:	f043 0302 	orr.w	r3, r3, #2
 80018fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001900:	4b16      	ldr	r3, [pc, #88]	; (800195c <HAL_I2C_MspInit+0xb4>)
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800190c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001910:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001914:	2312      	movs	r3, #18
 8001916:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001926:	2304      	movs	r3, #4
 8001928:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001930:	4619      	mov	r1, r3
 8001932:	480b      	ldr	r0, [pc, #44]	; (8001960 <HAL_I2C_MspInit+0xb8>)
 8001934:	f000 fc98 	bl	8002268 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <HAL_I2C_MspInit+0xb4>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	4a07      	ldr	r2, [pc, #28]	; (800195c <HAL_I2C_MspInit+0xb4>)
 800193e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001942:	6593      	str	r3, [r2, #88]	; 0x58
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_I2C_MspInit+0xb4>)
 8001946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001950:	bf00      	nop
 8001952:	37b8      	adds	r7, #184	; 0xb8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40005400 	.word	0x40005400
 800195c:	40021000 	.word	0x40021000
 8001960:	48000400 	.word	0x48000400

08001964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a29      	ldr	r2, [pc, #164]	; (8001a28 <HAL_TIM_Base_MspInit+0xc4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d14c      	bne.n	8001a20 <HAL_TIM_Base_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001986:	4b29      	ldr	r3, [pc, #164]	; (8001a2c <HAL_TIM_Base_MspInit+0xc8>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	4a28      	ldr	r2, [pc, #160]	; (8001a2c <HAL_TIM_Base_MspInit+0xc8>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6593      	str	r3, [r2, #88]	; 0x58
 8001992:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <HAL_TIM_Base_MspInit+0xc8>)
 8001994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800199e:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <HAL_TIM_Base_MspInit+0xc8>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	4a22      	ldr	r2, [pc, #136]	; (8001a2c <HAL_TIM_Base_MspInit+0xc8>)
 80019a4:	f043 0308 	orr.w	r3, r3, #8
 80019a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019aa:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <HAL_TIM_Base_MspInit+0xc8>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019b6:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <HAL_TIM_Base_MspInit+0xc8>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	4a1c      	ldr	r2, [pc, #112]	; (8001a2c <HAL_TIM_Base_MspInit+0xc8>)
 80019bc:	f043 0310 	orr.w	r3, r3, #16
 80019c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c2:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <HAL_TIM_Base_MspInit+0xc8>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80019ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019e0:	2302      	movs	r3, #2
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	4811      	ldr	r0, [pc, #68]	; (8001a30 <HAL_TIM_Base_MspInit+0xcc>)
 80019ec:	f000 fc3c 	bl	8002268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019f0:	2301      	movs	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a00:	2302      	movs	r3, #2
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4619      	mov	r1, r3
 8001a0a:	480a      	ldr	r0, [pc, #40]	; (8001a34 <HAL_TIM_Base_MspInit+0xd0>)
 8001a0c:	f000 fc2c 	bl	8002268 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2100      	movs	r1, #0
 8001a14:	201e      	movs	r0, #30
 8001a16:	f000 fa0c 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a1a:	201e      	movs	r0, #30
 8001a1c:	f000 fa25 	bl	8001e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a20:	bf00      	nop
 8001a22:	3728      	adds	r7, #40	; 0x28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40000800 	.word	0x40000800
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	48000c00 	.word	0x48000c00
 8001a34:	48001000 	.word	0x48001000

08001a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a3c:	e7fe      	b.n	8001a3c <NMI_Handler+0x4>

08001a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <HardFault_Handler+0x4>

08001a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <MemManage_Handler+0x4>

08001a4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <BusFault_Handler+0x4>

08001a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <UsageFault_Handler+0x4>

08001a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a84:	f000 f8b6 	bl	8001bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001a90:	2040      	movs	r0, #64	; 0x40
 8001a92:	f000 fd93 	bl	80025bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001a96:	2080      	movs	r0, #128	; 0x80
 8001a98:	f000 fd90 	bl	80025bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  audio_tim_isr();
 8001aa4:	f7ff f9b0 	bl	8000e08 <audio_tim_isr>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <TIM4_IRQHandler+0x14>)
 8001aaa:	f003 f93f 	bl	8004d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000324 	.word	0x20000324

08001ab8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <SystemInit+0x20>)
 8001abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac2:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <SystemInit+0x20>)
 8001ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <HAL_GPIO_EXTI_Callback>:
#include "stm32l4xx_hal.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	80fb      	strh	r3, [r7, #6]
 	volatile int i = 5;
 8001ae6:	2305      	movs	r3, #5
 8001ae8:	60fb      	str	r3, [r7, #12]
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001afc:	f7ff ffdc 	bl	8001ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b00:	480c      	ldr	r0, [pc, #48]	; (8001b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b02:	490d      	ldr	r1, [pc, #52]	; (8001b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b04:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <LoopForever+0xe>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b08:	e002      	b.n	8001b10 <LoopCopyDataInit>

08001b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0e:	3304      	adds	r3, #4

08001b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b14:	d3f9      	bcc.n	8001b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b18:	4c0a      	ldr	r4, [pc, #40]	; (8001b44 <LoopForever+0x16>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b1c:	e001      	b.n	8001b22 <LoopFillZerobss>

08001b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b20:	3204      	adds	r2, #4

08001b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b24:	d3fb      	bcc.n	8001b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b26:	f003 fce1 	bl	80054ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b2a:	f7ff fa0b 	bl	8000f44 <main>

08001b2e <LoopForever>:

LoopForever:
    b LoopForever
 8001b2e:	e7fe      	b.n	8001b2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b30:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b3c:	080067f0 	.word	0x080067f0
  ldr r2, =_sbss
 8001b40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b44:	20000374 	.word	0x20000374

08001b48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b48:	e7fe      	b.n	8001b48 <ADC1_IRQHandler>

08001b4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b54:	2003      	movs	r0, #3
 8001b56:	f000 f961 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f000 f80e 	bl	8001b7c <HAL_InitTick>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	71fb      	strb	r3, [r7, #7]
 8001b6a:	e001      	b.n	8001b70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b6c:	f7ff fe3a 	bl	80017e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b70:	79fb      	ldrb	r3, [r7, #7]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <HAL_InitTick+0x6c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d023      	beq.n	8001bd8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <HAL_InitTick+0x70>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <HAL_InitTick+0x6c>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f96d 	bl	8001e86 <HAL_SYSTICK_Config>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10f      	bne.n	8001bd2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d809      	bhi.n	8001bcc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f000 f937 	bl	8001e32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_InitTick+0x74>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e007      	b.n	8001bdc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	73fb      	strb	r3, [r7, #15]
 8001bd0:	e004      	b.n	8001bdc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	73fb      	strb	r3, [r7, #15]
 8001bd6:	e001      	b.n	8001bdc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000008 	.word	0x20000008
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	20000004 	.word	0x20000004

08001bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_IncTick+0x20>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_IncTick+0x24>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <HAL_IncTick+0x24>)
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000008 	.word	0x20000008
 8001c18:	20000370 	.word	0x20000370

08001c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <HAL_GetTick+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000370 	.word	0x20000370

08001c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c3c:	f7ff ffee 	bl	8001c1c <HAL_GetTick>
 8001c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d005      	beq.n	8001c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_Delay+0x44>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c5a:	bf00      	nop
 8001c5c:	f7ff ffde 	bl	8001c1c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d8f7      	bhi.n	8001c5c <HAL_Delay+0x28>
  {
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000008 	.word	0x20000008

08001c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cae:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	60d3      	str	r3, [r2, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <__NVIC_GetPriorityGrouping+0x18>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	f003 0307 	and.w	r3, r3, #7
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	db0b      	blt.n	8001d0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	4907      	ldr	r1, [pc, #28]	; (8001d18 <__NVIC_EnableIRQ+0x38>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	2001      	movs	r0, #1
 8001d02:	fa00 f202 	lsl.w	r2, r0, r2
 8001d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000e100 	.word	0xe000e100

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	; (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	; (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	; 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
         );
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de8:	d301      	bcc.n	8001dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00f      	b.n	8001e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <SysTick_Config+0x40>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df6:	210f      	movs	r1, #15
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f7ff ff8e 	bl	8001d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <SysTick_Config+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e06:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <SysTick_Config+0x40>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff29 	bl	8001c7c <__NVIC_SetPriorityGrouping>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e44:	f7ff ff3e 	bl	8001cc4 <__NVIC_GetPriorityGrouping>
 8001e48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	6978      	ldr	r0, [r7, #20]
 8001e50:	f7ff ff8e 	bl	8001d70 <NVIC_EncodePriority>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff5d 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e62:	bf00      	nop
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff31 	bl	8001ce0 <__NVIC_EnableIRQ>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ffa2 	bl	8001dd8 <SysTick_Config>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e014      	b.n	8001eda <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	791b      	ldrb	r3, [r3, #4]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d105      	bne.n	8001ec6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff fcb3 	bl	800182c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2202      	movs	r2, #2
 8001eca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	795b      	ldrb	r3, [r3, #5]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_DAC_Start+0x16>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e040      	b.n	8001f7a <HAL_DAC_Start+0x98>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2202      	movs	r2, #2
 8001f02:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6819      	ldr	r1, [r3, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2201      	movs	r2, #1
 8001f12:	409a      	lsls	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10f      	bne.n	8001f42 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d11d      	bne.n	8001f6c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	e014      	b.n	8001f6c <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	f003 0310 	and.w	r3, r3, #16
 8001f52:	2102      	movs	r1, #2
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d107      	bne.n	8001f6c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0202 	orr.w	r2, r2, #2
 8001f6a:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b087      	sub	sp, #28
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d105      	bne.n	8001fb0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	3308      	adds	r3, #8
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	e004      	b.n	8001fba <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3314      	adds	r3, #20
 8001fb8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	371c      	adds	r7, #28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	795b      	ldrb	r3, [r3, #5]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_DAC_ConfigChannel+0x1c>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e137      	b.n	800225c <HAL_DAC_ConfigChannel+0x28c>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	f040 8081 	bne.w	8002104 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002002:	f7ff fe0b 	bl	8001c1c <HAL_GetTick>
 8002006:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d140      	bne.n	8002090 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800200e:	e018      	b.n	8002042 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002010:	f7ff fe04 	bl	8001c1c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b01      	cmp	r3, #1
 800201c:	d911      	bls.n	8002042 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00a      	beq.n	8002042 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	f043 0208 	orr.w	r2, r3, #8
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2203      	movs	r2, #3
 800203c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e10c      	b.n	800225c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1df      	bne.n	8002010 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002050:	2001      	movs	r0, #1
 8002052:	f7ff fdef 	bl	8001c34 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	69d2      	ldr	r2, [r2, #28]
 800205e:	641a      	str	r2, [r3, #64]	; 0x40
 8002060:	e023      	b.n	80020aa <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002062:	f7ff fddb 	bl	8001c1c <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b01      	cmp	r3, #1
 800206e:	d90f      	bls.n	8002090 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002076:	2b00      	cmp	r3, #0
 8002078:	da0a      	bge.n	8002090 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f043 0208 	orr.w	r2, r3, #8
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2203      	movs	r2, #3
 800208a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e0e5      	b.n	800225c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002096:	2b00      	cmp	r3, #0
 8002098:	dbe3      	blt.n	8002062 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800209a:	2001      	movs	r0, #1
 800209c:	f7ff fdca 	bl	8001c34 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	69d2      	ldr	r2, [r2, #28]
 80020a8:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f003 0310 	and.w	r3, r3, #16
 80020b6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	ea02 0103 	and.w	r1, r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	6a1a      	ldr	r2, [r3, #32]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	409a      	lsls	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	21ff      	movs	r1, #255	; 0xff
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	ea02 0103 	and.w	r1, r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	409a      	lsls	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d11d      	bne.n	8002148 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002112:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	221f      	movs	r2, #31
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	4013      	ands	r3, r2
 8002126:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	4313      	orrs	r3, r2
 800213e:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	69fa      	ldr	r2, [r7, #28]
 8002146:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214e:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2207      	movs	r2, #7
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	4013      	ands	r3, r2
 8002162:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	431a      	orrs	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f003 0310 	and.w	r3, r3, #16
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	4313      	orrs	r3, r2
 8002186:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6819      	ldr	r1, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f003 0310 	and.w	r3, r3, #16
 800219c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43da      	mvns	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	400a      	ands	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	69fa      	ldr	r2, [r7, #28]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ec:	d104      	bne.n	80021f8 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	e018      	b.n	800222a <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d104      	bne.n	800220a <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	e00f      	b.n	800222a <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 800220a:	f001 febd 	bl	8003f88 <HAL_RCC_GetHCLKFreq>
 800220e:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4a14      	ldr	r2, [pc, #80]	; (8002264 <HAL_DAC_ConfigChannel+0x294>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d904      	bls.n	8002222 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800221e:	61fb      	str	r3, [r7, #28]
 8002220:	e003      	b.n	800222a <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002228:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6819      	ldr	r1, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	22c0      	movs	r2, #192	; 0xc0
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43da      	mvns	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	400a      	ands	r2, r1
 800224c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2201      	movs	r2, #1
 8002252:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3720      	adds	r7, #32
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	04c4b400 	.word	0x04c4b400

08002268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002276:	e166      	b.n	8002546 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2101      	movs	r1, #1
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	fa01 f303 	lsl.w	r3, r1, r3
 8002284:	4013      	ands	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8158 	beq.w	8002540 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b01      	cmp	r3, #1
 800229a:	d005      	beq.n	80022a8 <HAL_GPIO_Init+0x40>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d130      	bne.n	800230a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022de:	2201      	movs	r2, #1
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	f003 0201 	and.w	r2, r3, #1
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b03      	cmp	r3, #3
 8002314:	d017      	beq.n	8002346 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	2203      	movs	r2, #3
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d123      	bne.n	800239a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	08da      	lsrs	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3208      	adds	r2, #8
 800235a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	220f      	movs	r2, #15
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	08da      	lsrs	r2, r3, #3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3208      	adds	r2, #8
 8002394:	6939      	ldr	r1, [r7, #16]
 8002396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	2203      	movs	r2, #3
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 0203 	and.w	r2, r3, #3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80b2 	beq.w	8002540 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023dc:	4b61      	ldr	r3, [pc, #388]	; (8002564 <HAL_GPIO_Init+0x2fc>)
 80023de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e0:	4a60      	ldr	r2, [pc, #384]	; (8002564 <HAL_GPIO_Init+0x2fc>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6613      	str	r3, [r2, #96]	; 0x60
 80023e8:	4b5e      	ldr	r3, [pc, #376]	; (8002564 <HAL_GPIO_Init+0x2fc>)
 80023ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023f4:	4a5c      	ldr	r2, [pc, #368]	; (8002568 <HAL_GPIO_Init+0x300>)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002400:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800241e:	d02b      	beq.n	8002478 <HAL_GPIO_Init+0x210>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a52      	ldr	r2, [pc, #328]	; (800256c <HAL_GPIO_Init+0x304>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d025      	beq.n	8002474 <HAL_GPIO_Init+0x20c>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a51      	ldr	r2, [pc, #324]	; (8002570 <HAL_GPIO_Init+0x308>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d01f      	beq.n	8002470 <HAL_GPIO_Init+0x208>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a50      	ldr	r2, [pc, #320]	; (8002574 <HAL_GPIO_Init+0x30c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d019      	beq.n	800246c <HAL_GPIO_Init+0x204>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a4f      	ldr	r2, [pc, #316]	; (8002578 <HAL_GPIO_Init+0x310>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d013      	beq.n	8002468 <HAL_GPIO_Init+0x200>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a4e      	ldr	r2, [pc, #312]	; (800257c <HAL_GPIO_Init+0x314>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d00d      	beq.n	8002464 <HAL_GPIO_Init+0x1fc>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a4d      	ldr	r2, [pc, #308]	; (8002580 <HAL_GPIO_Init+0x318>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d007      	beq.n	8002460 <HAL_GPIO_Init+0x1f8>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a4c      	ldr	r2, [pc, #304]	; (8002584 <HAL_GPIO_Init+0x31c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d101      	bne.n	800245c <HAL_GPIO_Init+0x1f4>
 8002458:	2307      	movs	r3, #7
 800245a:	e00e      	b.n	800247a <HAL_GPIO_Init+0x212>
 800245c:	2308      	movs	r3, #8
 800245e:	e00c      	b.n	800247a <HAL_GPIO_Init+0x212>
 8002460:	2306      	movs	r3, #6
 8002462:	e00a      	b.n	800247a <HAL_GPIO_Init+0x212>
 8002464:	2305      	movs	r3, #5
 8002466:	e008      	b.n	800247a <HAL_GPIO_Init+0x212>
 8002468:	2304      	movs	r3, #4
 800246a:	e006      	b.n	800247a <HAL_GPIO_Init+0x212>
 800246c:	2303      	movs	r3, #3
 800246e:	e004      	b.n	800247a <HAL_GPIO_Init+0x212>
 8002470:	2302      	movs	r3, #2
 8002472:	e002      	b.n	800247a <HAL_GPIO_Init+0x212>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <HAL_GPIO_Init+0x212>
 8002478:	2300      	movs	r3, #0
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	f002 0203 	and.w	r2, r2, #3
 8002480:	0092      	lsls	r2, r2, #2
 8002482:	4093      	lsls	r3, r2
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800248a:	4937      	ldr	r1, [pc, #220]	; (8002568 <HAL_GPIO_Init+0x300>)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3302      	adds	r3, #2
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002498:	4b3b      	ldr	r3, [pc, #236]	; (8002588 <HAL_GPIO_Init+0x320>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024bc:	4a32      	ldr	r2, [pc, #200]	; (8002588 <HAL_GPIO_Init+0x320>)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024c2:	4b31      	ldr	r3, [pc, #196]	; (8002588 <HAL_GPIO_Init+0x320>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024e6:	4a28      	ldr	r2, [pc, #160]	; (8002588 <HAL_GPIO_Init+0x320>)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024ec:	4b26      	ldr	r3, [pc, #152]	; (8002588 <HAL_GPIO_Init+0x320>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002510:	4a1d      	ldr	r2, [pc, #116]	; (8002588 <HAL_GPIO_Init+0x320>)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <HAL_GPIO_Init+0x320>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	43db      	mvns	r3, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800253a:	4a13      	ldr	r2, [pc, #76]	; (8002588 <HAL_GPIO_Init+0x320>)
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	3301      	adds	r3, #1
 8002544:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	fa22 f303 	lsr.w	r3, r2, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	f47f ae91 	bne.w	8002278 <HAL_GPIO_Init+0x10>
  }
}
 8002556:	bf00      	nop
 8002558:	bf00      	nop
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	40021000 	.word	0x40021000
 8002568:	40010000 	.word	0x40010000
 800256c:	48000400 	.word	0x48000400
 8002570:	48000800 	.word	0x48000800
 8002574:	48000c00 	.word	0x48000c00
 8002578:	48001000 	.word	0x48001000
 800257c:	48001400 	.word	0x48001400
 8002580:	48001800 	.word	0x48001800
 8002584:	48001c00 	.word	0x48001c00
 8002588:	40010400 	.word	0x40010400

0800258c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]
 8002598:	4613      	mov	r3, r2
 800259a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800259c:	787b      	ldrb	r3, [r7, #1]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025a2:	887a      	ldrh	r2, [r7, #2]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025a8:	e002      	b.n	80025b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025aa:	887a      	ldrh	r2, [r7, #2]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025c6:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d006      	beq.n	80025e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fa7e 	bl	8001adc <HAL_GPIO_EXTI_Callback>
  }
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40010400 	.word	0x40010400

080025ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e08d      	b.n	800271a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d106      	bne.n	8002618 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff f948 	bl	80018a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2224      	movs	r2, #36	; 0x24
 800261c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0201 	bic.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800263c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800264c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d107      	bne.n	8002666 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	e006      	b.n	8002674 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002672:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d108      	bne.n	800268e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	e007      	b.n	800269e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800269c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691a      	ldr	r2, [r3, #16]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69d9      	ldr	r1, [r3, #28]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1a      	ldr	r2, [r3, #32]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af02      	add	r7, sp, #8
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	4608      	mov	r0, r1
 800272e:	4611      	mov	r1, r2
 8002730:	461a      	mov	r2, r3
 8002732:	4603      	mov	r3, r0
 8002734:	817b      	strh	r3, [r7, #10]
 8002736:	460b      	mov	r3, r1
 8002738:	813b      	strh	r3, [r7, #8]
 800273a:	4613      	mov	r3, r2
 800273c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b20      	cmp	r3, #32
 8002748:	f040 80f9 	bne.w	800293e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <HAL_I2C_Mem_Write+0x34>
 8002752:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002754:	2b00      	cmp	r3, #0
 8002756:	d105      	bne.n	8002764 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800275e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0ed      	b.n	8002940 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_I2C_Mem_Write+0x4e>
 800276e:	2302      	movs	r3, #2
 8002770:	e0e6      	b.n	8002940 <HAL_I2C_Mem_Write+0x21c>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800277a:	f7ff fa4f 	bl	8001c1c <HAL_GetTick>
 800277e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2319      	movs	r3, #25
 8002786:	2201      	movs	r2, #1
 8002788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fac3 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0d1      	b.n	8002940 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2221      	movs	r2, #33	; 0x21
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2240      	movs	r2, #64	; 0x40
 80027a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a3a      	ldr	r2, [r7, #32]
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027c4:	88f8      	ldrh	r0, [r7, #6]
 80027c6:	893a      	ldrh	r2, [r7, #8]
 80027c8:	8979      	ldrh	r1, [r7, #10]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	4603      	mov	r3, r0
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f9d3 	bl	8002b80 <I2C_RequestMemoryWrite>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0a9      	b.n	8002940 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2bff      	cmp	r3, #255	; 0xff
 80027f4:	d90e      	bls.n	8002814 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	22ff      	movs	r2, #255	; 0xff
 80027fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002800:	b2da      	uxtb	r2, r3
 8002802:	8979      	ldrh	r1, [r7, #10]
 8002804:	2300      	movs	r3, #0
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 fc3d 	bl	800308c <I2C_TransferConfig>
 8002812:	e00f      	b.n	8002834 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002822:	b2da      	uxtb	r2, r3
 8002824:	8979      	ldrh	r1, [r7, #10]
 8002826:	2300      	movs	r3, #0
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 fc2c 	bl	800308c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 fabc 	bl	8002db6 <I2C_WaitOnTXISFlagUntilTimeout>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e07b      	b.n	8002940 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d034      	beq.n	80028ec <HAL_I2C_Mem_Write+0x1c8>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002886:	2b00      	cmp	r3, #0
 8002888:	d130      	bne.n	80028ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002890:	2200      	movs	r2, #0
 8002892:	2180      	movs	r1, #128	; 0x80
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 fa3f 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e04d      	b.n	8002940 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2bff      	cmp	r3, #255	; 0xff
 80028ac:	d90e      	bls.n	80028cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	22ff      	movs	r2, #255	; 0xff
 80028b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	8979      	ldrh	r1, [r7, #10]
 80028bc:	2300      	movs	r3, #0
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 fbe1 	bl	800308c <I2C_TransferConfig>
 80028ca:	e00f      	b.n	80028ec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	8979      	ldrh	r1, [r7, #10]
 80028de:	2300      	movs	r3, #0
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 fbd0 	bl	800308c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d19e      	bne.n	8002834 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 faa2 	bl	8002e44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e01a      	b.n	8002940 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2220      	movs	r2, #32
 8002910:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <HAL_I2C_Mem_Write+0x224>)
 800291e:	400b      	ands	r3, r1
 8002920:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e000      	b.n	8002940 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800293e:	2302      	movs	r3, #2
  }
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	fe00e800 	.word	0xfe00e800

0800294c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	4608      	mov	r0, r1
 8002956:	4611      	mov	r1, r2
 8002958:	461a      	mov	r2, r3
 800295a:	4603      	mov	r3, r0
 800295c:	817b      	strh	r3, [r7, #10]
 800295e:	460b      	mov	r3, r1
 8002960:	813b      	strh	r3, [r7, #8]
 8002962:	4613      	mov	r3, r2
 8002964:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b20      	cmp	r3, #32
 8002970:	f040 80fd 	bne.w	8002b6e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_I2C_Mem_Read+0x34>
 800297a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800297c:	2b00      	cmp	r3, #0
 800297e:	d105      	bne.n	800298c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002986:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0f1      	b.n	8002b70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_I2C_Mem_Read+0x4e>
 8002996:	2302      	movs	r3, #2
 8002998:	e0ea      	b.n	8002b70 <HAL_I2C_Mem_Read+0x224>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029a2:	f7ff f93b 	bl	8001c1c <HAL_GetTick>
 80029a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2319      	movs	r3, #25
 80029ae:	2201      	movs	r2, #1
 80029b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f9af 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0d5      	b.n	8002b70 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2222      	movs	r2, #34	; 0x22
 80029c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2240      	movs	r2, #64	; 0x40
 80029d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a3a      	ldr	r2, [r7, #32]
 80029de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029ec:	88f8      	ldrh	r0, [r7, #6]
 80029ee:	893a      	ldrh	r2, [r7, #8]
 80029f0:	8979      	ldrh	r1, [r7, #10]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	4603      	mov	r3, r0
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 f913 	bl	8002c28 <I2C_RequestMemoryRead>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0ad      	b.n	8002b70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2bff      	cmp	r3, #255	; 0xff
 8002a1c:	d90e      	bls.n	8002a3c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	22ff      	movs	r2, #255	; 0xff
 8002a22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	8979      	ldrh	r1, [r7, #10]
 8002a2c:	4b52      	ldr	r3, [pc, #328]	; (8002b78 <HAL_I2C_Mem_Read+0x22c>)
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fb29 	bl	800308c <I2C_TransferConfig>
 8002a3a:	e00f      	b.n	8002a5c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	8979      	ldrh	r1, [r7, #10]
 8002a4e:	4b4a      	ldr	r3, [pc, #296]	; (8002b78 <HAL_I2C_Mem_Read+0x22c>)
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fb18 	bl	800308c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a62:	2200      	movs	r2, #0
 8002a64:	2104      	movs	r1, #4
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f956 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e07c      	b.n	8002b70 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d034      	beq.n	8002b1c <HAL_I2C_Mem_Read+0x1d0>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d130      	bne.n	8002b1c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2180      	movs	r1, #128	; 0x80
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f927 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e04d      	b.n	8002b70 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2bff      	cmp	r3, #255	; 0xff
 8002adc:	d90e      	bls.n	8002afc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	22ff      	movs	r2, #255	; 0xff
 8002ae2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	8979      	ldrh	r1, [r7, #10]
 8002aec:	2300      	movs	r3, #0
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 fac9 	bl	800308c <I2C_TransferConfig>
 8002afa:	e00f      	b.n	8002b1c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	8979      	ldrh	r1, [r7, #10]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 fab8 	bl	800308c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d19a      	bne.n	8002a5c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f98a 	bl	8002e44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e01a      	b.n	8002b70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6859      	ldr	r1, [r3, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_I2C_Mem_Read+0x230>)
 8002b4e:	400b      	ands	r3, r1
 8002b50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	e000      	b.n	8002b70 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b6e:	2302      	movs	r3, #2
  }
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	80002400 	.word	0x80002400
 8002b7c:	fe00e800 	.word	0xfe00e800

08002b80 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	4608      	mov	r0, r1
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	817b      	strh	r3, [r7, #10]
 8002b92:	460b      	mov	r3, r1
 8002b94:	813b      	strh	r3, [r7, #8]
 8002b96:	4613      	mov	r3, r2
 8002b98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	8979      	ldrh	r1, [r7, #10]
 8002ba0:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <I2C_RequestMemoryWrite+0xa4>)
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fa6f 	bl	800308c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	69b9      	ldr	r1, [r7, #24]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f8ff 	bl	8002db6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e02c      	b.n	8002c1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d105      	bne.n	8002bd4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bc8:	893b      	ldrh	r3, [r7, #8]
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	629a      	str	r2, [r3, #40]	; 0x28
 8002bd2:	e015      	b.n	8002c00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bd4:	893b      	ldrh	r3, [r7, #8]
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	69b9      	ldr	r1, [r7, #24]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f8e5 	bl	8002db6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e012      	b.n	8002c1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bf6:	893b      	ldrh	r3, [r7, #8]
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	2200      	movs	r2, #0
 8002c08:	2180      	movs	r1, #128	; 0x80
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 f884 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	80002000 	.word	0x80002000

08002c28 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	4608      	mov	r0, r1
 8002c32:	4611      	mov	r1, r2
 8002c34:	461a      	mov	r2, r3
 8002c36:	4603      	mov	r3, r0
 8002c38:	817b      	strh	r3, [r7, #10]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	813b      	strh	r3, [r7, #8]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	8979      	ldrh	r1, [r7, #10]
 8002c48:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <I2C_RequestMemoryRead+0xa4>)
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 fa1c 	bl	800308c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	69b9      	ldr	r1, [r7, #24]
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f8ac 	bl	8002db6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e02c      	b.n	8002cc2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d105      	bne.n	8002c7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c6e:	893b      	ldrh	r3, [r7, #8]
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
 8002c78:	e015      	b.n	8002ca6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c7a:	893b      	ldrh	r3, [r7, #8]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	69b9      	ldr	r1, [r7, #24]
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f892 	bl	8002db6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e012      	b.n	8002cc2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c9c:	893b      	ldrh	r3, [r7, #8]
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2200      	movs	r2, #0
 8002cae:	2140      	movs	r1, #64	; 0x40
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 f831 	bl	8002d18 <I2C_WaitOnFlagUntilTimeout>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	80002000 	.word	0x80002000

08002cd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d103      	bne.n	8002cee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2200      	movs	r2, #0
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d007      	beq.n	8002d0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	619a      	str	r2, [r3, #24]
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	4613      	mov	r3, r2
 8002d26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d28:	e031      	b.n	8002d8e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d30:	d02d      	beq.n	8002d8e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d32:	f7fe ff73 	bl	8001c1c <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d302      	bcc.n	8002d48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d122      	bne.n	8002d8e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4013      	ands	r3, r2
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d113      	bne.n	8002d8e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	f043 0220 	orr.w	r2, r3, #32
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e00f      	b.n	8002dae <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699a      	ldr	r2, [r3, #24]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4013      	ands	r3, r2
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	bf0c      	ite	eq
 8002d9e:	2301      	moveq	r3, #1
 8002da0:	2300      	movne	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d0be      	beq.n	8002d2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dc2:	e033      	b.n	8002e2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f87f 	bl	8002ecc <I2C_IsErrorOccurred>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e031      	b.n	8002e3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dde:	d025      	beq.n	8002e2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de0:	f7fe ff1c 	bl	8001c1c <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d302      	bcc.n	8002df6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d11a      	bne.n	8002e2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d013      	beq.n	8002e2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e08:	f043 0220 	orr.w	r2, r3, #32
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e007      	b.n	8002e3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d1c4      	bne.n	8002dc4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e50:	e02f      	b.n	8002eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	68b9      	ldr	r1, [r7, #8]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f838 	bl	8002ecc <I2C_IsErrorOccurred>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e02d      	b.n	8002ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e66:	f7fe fed9 	bl	8001c1c <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d302      	bcc.n	8002e7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d11a      	bne.n	8002eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d013      	beq.n	8002eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	f043 0220 	orr.w	r2, r3, #32
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e007      	b.n	8002ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 0320 	and.w	r3, r3, #32
 8002ebc:	2b20      	cmp	r3, #32
 8002ebe:	d1c8      	bne.n	8002e52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	; 0x28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d068      	beq.n	8002fca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2210      	movs	r2, #16
 8002efe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f00:	e049      	b.n	8002f96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f08:	d045      	beq.n	8002f96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f0a:	f7fe fe87 	bl	8001c1c <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d302      	bcc.n	8002f20 <I2C_IsErrorOccurred+0x54>
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d13a      	bne.n	8002f96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f42:	d121      	bne.n	8002f88 <I2C_IsErrorOccurred+0xbc>
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f4a:	d01d      	beq.n	8002f88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f4c:	7cfb      	ldrb	r3, [r7, #19]
 8002f4e:	2b20      	cmp	r3, #32
 8002f50:	d01a      	beq.n	8002f88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f62:	f7fe fe5b 	bl	8001c1c <HAL_GetTick>
 8002f66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f68:	e00e      	b.n	8002f88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f6a:	f7fe fe57 	bl	8001c1c <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b19      	cmp	r3, #25
 8002f76:	d907      	bls.n	8002f88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	f043 0320 	orr.w	r3, r3, #32
 8002f7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002f86:	e006      	b.n	8002f96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	2b20      	cmp	r3, #32
 8002f94:	d1e9      	bne.n	8002f6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	d003      	beq.n	8002fac <I2C_IsErrorOccurred+0xe0>
 8002fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0aa      	beq.n	8002f02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d103      	bne.n	8002fbc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	f043 0304 	orr.w	r3, r3, #4
 8002fc2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00b      	beq.n	8002ff4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	f043 0308 	orr.w	r3, r3, #8
 8003004:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800300e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00b      	beq.n	8003038 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	f043 0302 	orr.w	r3, r3, #2
 8003026:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003030:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01c      	beq.n	800307a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f7ff fe45 	bl	8002cd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <I2C_IsErrorOccurred+0x1bc>)
 8003052:	400b      	ands	r3, r1
 8003054:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	431a      	orrs	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800307a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800307e:	4618      	mov	r0, r3
 8003080:	3728      	adds	r7, #40	; 0x28
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	fe00e800 	.word	0xfe00e800

0800308c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	817b      	strh	r3, [r7, #10]
 800309a:	4613      	mov	r3, r2
 800309c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800309e:	897b      	ldrh	r3, [r7, #10]
 80030a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030a4:	7a7b      	ldrb	r3, [r7, #9]
 80030a6:	041b      	lsls	r3, r3, #16
 80030a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	0d5b      	lsrs	r3, r3, #21
 80030c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80030ca:	4b08      	ldr	r3, [pc, #32]	; (80030ec <I2C_TransferConfig+0x60>)
 80030cc:	430b      	orrs	r3, r1
 80030ce:	43db      	mvns	r3, r3
 80030d0:	ea02 0103 	and.w	r1, r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80030de:	bf00      	nop
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	03ff63ff 	.word	0x03ff63ff

080030f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b20      	cmp	r3, #32
 8003104:	d138      	bne.n	8003178 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003110:	2302      	movs	r3, #2
 8003112:	e032      	b.n	800317a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2224      	movs	r2, #36	; 0x24
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0201 	bic.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003142:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6819      	ldr	r1, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	e000      	b.n	800317a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003178:	2302      	movs	r3, #2
  }
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003186:	b480      	push	{r7}
 8003188:	b085      	sub	sp, #20
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b20      	cmp	r3, #32
 800319a:	d139      	bne.n	8003210 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e033      	b.n	8003212 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2224      	movs	r2, #36	; 0x24
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0201 	bic.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	e000      	b.n	8003212 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003210:	2302      	movs	r3, #2
  }
}
 8003212:	4618      	mov	r0, r3
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800322c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003230:	d102      	bne.n	8003238 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003236:	e00b      	b.n	8003250 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <HAL_PWREx_GetVoltageRange+0x3c>)
 800323a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003246:	d102      	bne.n	800324e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800324c:	e000      	b.n	8003250 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800324e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003250:	4618      	mov	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40007000 	.word	0x40007000

08003260 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d141      	bne.n	80032f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800326e:	4b4b      	ldr	r3, [pc, #300]	; (800339c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327a:	d131      	bne.n	80032e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800327c:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003282:	4a46      	ldr	r2, [pc, #280]	; (800339c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003288:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800328c:	4b43      	ldr	r3, [pc, #268]	; (800339c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003294:	4a41      	ldr	r2, [pc, #260]	; (800339c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800329a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800329c:	4b40      	ldr	r3, [pc, #256]	; (80033a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2232      	movs	r2, #50	; 0x32
 80032a2:	fb02 f303 	mul.w	r3, r2, r3
 80032a6:	4a3f      	ldr	r2, [pc, #252]	; (80033a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032a8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ac:	0c9b      	lsrs	r3, r3, #18
 80032ae:	3301      	adds	r3, #1
 80032b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b2:	e002      	b.n	80032ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ba:	4b38      	ldr	r3, [pc, #224]	; (800339c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c6:	d102      	bne.n	80032ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f2      	bne.n	80032b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ce:	4b33      	ldr	r3, [pc, #204]	; (800339c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032da:	d158      	bne.n	800338e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e057      	b.n	8003390 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032e0:	4b2e      	ldr	r3, [pc, #184]	; (800339c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032e6:	4a2d      	ldr	r2, [pc, #180]	; (800339c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032f0:	e04d      	b.n	800338e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032f8:	d141      	bne.n	800337e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032fa:	4b28      	ldr	r3, [pc, #160]	; (800339c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003306:	d131      	bne.n	800336c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003308:	4b24      	ldr	r3, [pc, #144]	; (800339c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800330e:	4a23      	ldr	r2, [pc, #140]	; (800339c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003314:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003318:	4b20      	ldr	r3, [pc, #128]	; (800339c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003320:	4a1e      	ldr	r2, [pc, #120]	; (800339c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003326:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003328:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2232      	movs	r2, #50	; 0x32
 800332e:	fb02 f303 	mul.w	r3, r2, r3
 8003332:	4a1c      	ldr	r2, [pc, #112]	; (80033a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003334:	fba2 2303 	umull	r2, r3, r2, r3
 8003338:	0c9b      	lsrs	r3, r3, #18
 800333a:	3301      	adds	r3, #1
 800333c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800333e:	e002      	b.n	8003346 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	3b01      	subs	r3, #1
 8003344:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003352:	d102      	bne.n	800335a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f2      	bne.n	8003340 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800335a:	4b10      	ldr	r3, [pc, #64]	; (800339c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003366:	d112      	bne.n	800338e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e011      	b.n	8003390 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003372:	4a0a      	ldr	r2, [pc, #40]	; (800339c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003378:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800337c:	e007      	b.n	800338e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800337e:	4b07      	ldr	r3, [pc, #28]	; (800339c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003386:	4a05      	ldr	r2, [pc, #20]	; (800339c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003388:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800338c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	40007000 	.word	0x40007000
 80033a0:	20000000 	.word	0x20000000
 80033a4:	431bde83 	.word	0x431bde83

080033a8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4a04      	ldr	r2, [pc, #16]	; (80033c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80033b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033b6:	6053      	str	r3, [r2, #4]
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40007000 	.word	0x40007000

080033c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f000 bc08 	b.w	8003bec <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033dc:	4b96      	ldr	r3, [pc, #600]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033e6:	4b94      	ldr	r3, [pc, #592]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80e4 	beq.w	80035c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d007      	beq.n	8003414 <HAL_RCC_OscConfig+0x4c>
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2b0c      	cmp	r3, #12
 8003408:	f040 808b 	bne.w	8003522 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b01      	cmp	r3, #1
 8003410:	f040 8087 	bne.w	8003522 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003414:	4b88      	ldr	r3, [pc, #544]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_OscConfig+0x64>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e3df      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1a      	ldr	r2, [r3, #32]
 8003430:	4b81      	ldr	r3, [pc, #516]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d004      	beq.n	8003446 <HAL_RCC_OscConfig+0x7e>
 800343c:	4b7e      	ldr	r3, [pc, #504]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003444:	e005      	b.n	8003452 <HAL_RCC_OscConfig+0x8a>
 8003446:	4b7c      	ldr	r3, [pc, #496]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 8003448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003452:	4293      	cmp	r3, r2
 8003454:	d223      	bcs.n	800349e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fda0 	bl	8003fa0 <RCC_SetFlashLatencyFromMSIRange>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e3c0      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800346a:	4b73      	ldr	r3, [pc, #460]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a72      	ldr	r2, [pc, #456]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 8003470:	f043 0308 	orr.w	r3, r3, #8
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	4b70      	ldr	r3, [pc, #448]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	496d      	ldr	r1, [pc, #436]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 8003484:	4313      	orrs	r3, r2
 8003486:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003488:	4b6b      	ldr	r3, [pc, #428]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	021b      	lsls	r3, r3, #8
 8003496:	4968      	ldr	r1, [pc, #416]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]
 800349c:	e025      	b.n	80034ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800349e:	4b66      	ldr	r3, [pc, #408]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a65      	ldr	r2, [pc, #404]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 80034a4:	f043 0308 	orr.w	r3, r3, #8
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	4b63      	ldr	r3, [pc, #396]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	4960      	ldr	r1, [pc, #384]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034bc:	4b5e      	ldr	r3, [pc, #376]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	495b      	ldr	r1, [pc, #364]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fd60 	bl	8003fa0 <RCC_SetFlashLatencyFromMSIRange>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e380      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034ea:	f000 fcc1 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 80034ee:	4602      	mov	r2, r0
 80034f0:	4b51      	ldr	r3, [pc, #324]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	4950      	ldr	r1, [pc, #320]	; (800363c <HAL_RCC_OscConfig+0x274>)
 80034fc:	5ccb      	ldrb	r3, [r1, r3]
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	fa22 f303 	lsr.w	r3, r2, r3
 8003506:	4a4e      	ldr	r2, [pc, #312]	; (8003640 <HAL_RCC_OscConfig+0x278>)
 8003508:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800350a:	4b4e      	ldr	r3, [pc, #312]	; (8003644 <HAL_RCC_OscConfig+0x27c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe fb34 	bl	8001b7c <HAL_InitTick>
 8003514:	4603      	mov	r3, r0
 8003516:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d052      	beq.n	80035c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	e364      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d032      	beq.n	8003590 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800352a:	4b43      	ldr	r3, [pc, #268]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a42      	ldr	r2, [pc, #264]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003536:	f7fe fb71 	bl	8001c1c <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800353e:	f7fe fb6d 	bl	8001c1c <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e34d      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003550:	4b39      	ldr	r3, [pc, #228]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f0      	beq.n	800353e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800355c:	4b36      	ldr	r3, [pc, #216]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a35      	ldr	r2, [pc, #212]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 8003562:	f043 0308 	orr.w	r3, r3, #8
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	4b33      	ldr	r3, [pc, #204]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4930      	ldr	r1, [pc, #192]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800357a:	4b2f      	ldr	r3, [pc, #188]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	492b      	ldr	r1, [pc, #172]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]
 800358e:	e01a      	b.n	80035c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003590:	4b29      	ldr	r3, [pc, #164]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a28      	ldr	r2, [pc, #160]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 8003596:	f023 0301 	bic.w	r3, r3, #1
 800359a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800359c:	f7fe fb3e 	bl	8001c1c <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035a4:	f7fe fb3a 	bl	8001c1c <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e31a      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035b6:	4b20      	ldr	r3, [pc, #128]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x1dc>
 80035c2:	e000      	b.n	80035c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d073      	beq.n	80036ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_OscConfig+0x21c>
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b0c      	cmp	r3, #12
 80035dc:	d10e      	bne.n	80035fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d10b      	bne.n	80035fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	4b14      	ldr	r3, [pc, #80]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d063      	beq.n	80036b8 <HAL_RCC_OscConfig+0x2f0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d15f      	bne.n	80036b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e2f7      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003604:	d106      	bne.n	8003614 <HAL_RCC_OscConfig+0x24c>
 8003606:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a0b      	ldr	r2, [pc, #44]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e025      	b.n	8003660 <HAL_RCC_OscConfig+0x298>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800361c:	d114      	bne.n	8003648 <HAL_RCC_OscConfig+0x280>
 800361e:	4b06      	ldr	r3, [pc, #24]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a05      	ldr	r2, [pc, #20]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 8003624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	4b03      	ldr	r3, [pc, #12]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a02      	ldr	r2, [pc, #8]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e013      	b.n	8003660 <HAL_RCC_OscConfig+0x298>
 8003638:	40021000 	.word	0x40021000
 800363c:	080065d0 	.word	0x080065d0
 8003640:	20000000 	.word	0x20000000
 8003644:	20000004 	.word	0x20000004
 8003648:	4ba0      	ldr	r3, [pc, #640]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a9f      	ldr	r2, [pc, #636]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 800364e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	4b9d      	ldr	r3, [pc, #628]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a9c      	ldr	r2, [pc, #624]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 800365a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800365e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d013      	beq.n	8003690 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fe fad8 	bl	8001c1c <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003670:	f7fe fad4 	bl	8001c1c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	; 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e2b4      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003682:	4b92      	ldr	r3, [pc, #584]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x2a8>
 800368e:	e014      	b.n	80036ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fe fac4 	bl	8001c1c <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003698:	f7fe fac0 	bl	8001c1c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	; 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e2a0      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036aa:	4b88      	ldr	r3, [pc, #544]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x2d0>
 80036b6:	e000      	b.n	80036ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d060      	beq.n	8003788 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d005      	beq.n	80036d8 <HAL_RCC_OscConfig+0x310>
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2b0c      	cmp	r3, #12
 80036d0:	d119      	bne.n	8003706 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d116      	bne.n	8003706 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036d8:	4b7c      	ldr	r3, [pc, #496]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_OscConfig+0x328>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e27d      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f0:	4b76      	ldr	r3, [pc, #472]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	061b      	lsls	r3, r3, #24
 80036fe:	4973      	ldr	r1, [pc, #460]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 8003700:	4313      	orrs	r3, r2
 8003702:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003704:	e040      	b.n	8003788 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d023      	beq.n	8003756 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800370e:	4b6f      	ldr	r3, [pc, #444]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a6e      	ldr	r2, [pc, #440]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 8003714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371a:	f7fe fa7f 	bl	8001c1c <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003722:	f7fe fa7b 	bl	8001c1c <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e25b      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003734:	4b65      	ldr	r3, [pc, #404]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003740:	4b62      	ldr	r3, [pc, #392]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	061b      	lsls	r3, r3, #24
 800374e:	495f      	ldr	r1, [pc, #380]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 8003750:	4313      	orrs	r3, r2
 8003752:	604b      	str	r3, [r1, #4]
 8003754:	e018      	b.n	8003788 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003756:	4b5d      	ldr	r3, [pc, #372]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a5c      	ldr	r2, [pc, #368]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 800375c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003762:	f7fe fa5b 	bl	8001c1c <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800376a:	f7fe fa57 	bl	8001c1c <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e237      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800377c:	4b53      	ldr	r3, [pc, #332]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1f0      	bne.n	800376a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d03c      	beq.n	800380e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01c      	beq.n	80037d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800379c:	4b4b      	ldr	r3, [pc, #300]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 800379e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037a2:	4a4a      	ldr	r2, [pc, #296]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ac:	f7fe fa36 	bl	8001c1c <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b4:	f7fe fa32 	bl	8001c1c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e212      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037c6:	4b41      	ldr	r3, [pc, #260]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 80037c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0ef      	beq.n	80037b4 <HAL_RCC_OscConfig+0x3ec>
 80037d4:	e01b      	b.n	800380e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037d6:	4b3d      	ldr	r3, [pc, #244]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 80037d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037dc:	4a3b      	ldr	r2, [pc, #236]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 80037de:	f023 0301 	bic.w	r3, r3, #1
 80037e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e6:	f7fe fa19 	bl	8001c1c <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ee:	f7fe fa15 	bl	8001c1c <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e1f5      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003800:	4b32      	ldr	r3, [pc, #200]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 8003802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1ef      	bne.n	80037ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 80a6 	beq.w	8003968 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800381c:	2300      	movs	r3, #0
 800381e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003820:	4b2a      	ldr	r3, [pc, #168]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 8003822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10d      	bne.n	8003848 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800382c:	4b27      	ldr	r3, [pc, #156]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 800382e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003830:	4a26      	ldr	r2, [pc, #152]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 8003832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003836:	6593      	str	r3, [r2, #88]	; 0x58
 8003838:	4b24      	ldr	r3, [pc, #144]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 800383a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003844:	2301      	movs	r3, #1
 8003846:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003848:	4b21      	ldr	r3, [pc, #132]	; (80038d0 <HAL_RCC_OscConfig+0x508>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d118      	bne.n	8003886 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003854:	4b1e      	ldr	r3, [pc, #120]	; (80038d0 <HAL_RCC_OscConfig+0x508>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a1d      	ldr	r2, [pc, #116]	; (80038d0 <HAL_RCC_OscConfig+0x508>)
 800385a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800385e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003860:	f7fe f9dc 	bl	8001c1c <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003868:	f7fe f9d8 	bl	8001c1c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e1b8      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800387a:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <HAL_RCC_OscConfig+0x508>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d108      	bne.n	80038a0 <HAL_RCC_OscConfig+0x4d8>
 800388e:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003894:	4a0d      	ldr	r2, [pc, #52]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800389e:	e029      	b.n	80038f4 <HAL_RCC_OscConfig+0x52c>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b05      	cmp	r3, #5
 80038a6:	d115      	bne.n	80038d4 <HAL_RCC_OscConfig+0x50c>
 80038a8:	4b08      	ldr	r3, [pc, #32]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ae:	4a07      	ldr	r2, [pc, #28]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 80038b0:	f043 0304 	orr.w	r3, r3, #4
 80038b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038b8:	4b04      	ldr	r3, [pc, #16]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038be:	4a03      	ldr	r2, [pc, #12]	; (80038cc <HAL_RCC_OscConfig+0x504>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038c8:	e014      	b.n	80038f4 <HAL_RCC_OscConfig+0x52c>
 80038ca:	bf00      	nop
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40007000 	.word	0x40007000
 80038d4:	4b9d      	ldr	r3, [pc, #628]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038da:	4a9c      	ldr	r2, [pc, #624]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038e4:	4b99      	ldr	r3, [pc, #612]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ea:	4a98      	ldr	r2, [pc, #608]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 80038ec:	f023 0304 	bic.w	r3, r3, #4
 80038f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d016      	beq.n	800392a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7fe f98e 	bl	8001c1c <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003902:	e00a      	b.n	800391a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003904:	f7fe f98a 	bl	8001c1c <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e168      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800391a:	4b8c      	ldr	r3, [pc, #560]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 800391c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ed      	beq.n	8003904 <HAL_RCC_OscConfig+0x53c>
 8003928:	e015      	b.n	8003956 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392a:	f7fe f977 	bl	8001c1c <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003930:	e00a      	b.n	8003948 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003932:	f7fe f973 	bl	8001c1c <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003940:	4293      	cmp	r3, r2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e151      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003948:	4b80      	ldr	r3, [pc, #512]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1ed      	bne.n	8003932 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003956:	7ffb      	ldrb	r3, [r7, #31]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d105      	bne.n	8003968 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800395c:	4b7b      	ldr	r3, [pc, #492]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	4a7a      	ldr	r2, [pc, #488]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003966:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d03c      	beq.n	80039ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01c      	beq.n	80039b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800397c:	4b73      	ldr	r3, [pc, #460]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 800397e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003982:	4a72      	ldr	r2, [pc, #456]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7fe f946 	bl	8001c1c <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003994:	f7fe f942 	bl	8001c1c <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e122      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039a6:	4b69      	ldr	r3, [pc, #420]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 80039a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0ef      	beq.n	8003994 <HAL_RCC_OscConfig+0x5cc>
 80039b4:	e01b      	b.n	80039ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039b6:	4b65      	ldr	r3, [pc, #404]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 80039b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039bc:	4a63      	ldr	r2, [pc, #396]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 80039be:	f023 0301 	bic.w	r3, r3, #1
 80039c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c6:	f7fe f929 	bl	8001c1c <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039ce:	f7fe f925 	bl	8001c1c <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e105      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039e0:	4b5a      	ldr	r3, [pc, #360]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 80039e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1ef      	bne.n	80039ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 80f9 	beq.w	8003bea <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	f040 80cf 	bne.w	8003ba0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a02:	4b52      	ldr	r3, [pc, #328]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f003 0203 	and.w	r2, r3, #3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d12c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	3b01      	subs	r3, #1
 8003a22:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d123      	bne.n	8003a70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a32:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d11b      	bne.n	8003a70 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d113      	bne.n	8003a70 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	085b      	lsrs	r3, r3, #1
 8003a54:	3b01      	subs	r3, #1
 8003a56:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d109      	bne.n	8003a70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d071      	beq.n	8003b54 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b0c      	cmp	r3, #12
 8003a74:	d068      	beq.n	8003b48 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a76:	4b35      	ldr	r3, [pc, #212]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d105      	bne.n	8003a8e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a82:	4b32      	ldr	r3, [pc, #200]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e0ac      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a92:	4b2e      	ldr	r3, [pc, #184]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a2d      	ldr	r2, [pc, #180]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003a98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a9e:	f7fe f8bd 	bl	8001c1c <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa6:	f7fe f8b9 	bl	8001c1c <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e099      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ab8:	4b24      	ldr	r3, [pc, #144]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f0      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ac4:	4b21      	ldr	r3, [pc, #132]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	4b21      	ldr	r3, [pc, #132]	; (8003b50 <HAL_RCC_OscConfig+0x788>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ad4:	3a01      	subs	r2, #1
 8003ad6:	0112      	lsls	r2, r2, #4
 8003ad8:	4311      	orrs	r1, r2
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ade:	0212      	lsls	r2, r2, #8
 8003ae0:	4311      	orrs	r1, r2
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ae6:	0852      	lsrs	r2, r2, #1
 8003ae8:	3a01      	subs	r2, #1
 8003aea:	0552      	lsls	r2, r2, #21
 8003aec:	4311      	orrs	r1, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003af2:	0852      	lsrs	r2, r2, #1
 8003af4:	3a01      	subs	r2, #1
 8003af6:	0652      	lsls	r2, r2, #25
 8003af8:	4311      	orrs	r1, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003afe:	06d2      	lsls	r2, r2, #27
 8003b00:	430a      	orrs	r2, r1
 8003b02:	4912      	ldr	r1, [pc, #72]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b08:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a0f      	ldr	r2, [pc, #60]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b14:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4a0c      	ldr	r2, [pc, #48]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b20:	f7fe f87c 	bl	8001c1c <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fe f878 	bl	8001c1c <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e058      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b3a:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b46:	e050      	b.n	8003bea <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e04f      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b54:	4b27      	ldr	r3, [pc, #156]	; (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d144      	bne.n	8003bea <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b60:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a23      	ldr	r2, [pc, #140]	; (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b6c:	4b21      	ldr	r3, [pc, #132]	; (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4a20      	ldr	r2, [pc, #128]	; (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b78:	f7fe f850 	bl	8001c1c <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b80:	f7fe f84c 	bl	8001c1c <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e02c      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b92:	4b18      	ldr	r3, [pc, #96]	; (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x7b8>
 8003b9e:	e024      	b.n	8003bea <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b0c      	cmp	r3, #12
 8003ba4:	d01f      	beq.n	8003be6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba6:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a12      	ldr	r2, [pc, #72]	; (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb2:	f7fe f833 	bl	8001c1c <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bba:	f7fe f82f 	bl	8001c1c <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e00f      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bcc:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f0      	bne.n	8003bba <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	4905      	ldr	r1, [pc, #20]	; (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003bde:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <HAL_RCC_OscConfig+0x830>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	60cb      	str	r3, [r1, #12]
 8003be4:	e001      	b.n	8003bea <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3720      	adds	r7, #32
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	feeefffc 	.word	0xfeeefffc

08003bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e11d      	b.n	8003e50 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c14:	4b90      	ldr	r3, [pc, #576]	; (8003e58 <HAL_RCC_ClockConfig+0x25c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d910      	bls.n	8003c44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c22:	4b8d      	ldr	r3, [pc, #564]	; (8003e58 <HAL_RCC_ClockConfig+0x25c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 020f 	bic.w	r2, r3, #15
 8003c2a:	498b      	ldr	r1, [pc, #556]	; (8003e58 <HAL_RCC_ClockConfig+0x25c>)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c32:	4b89      	ldr	r3, [pc, #548]	; (8003e58 <HAL_RCC_ClockConfig+0x25c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e105      	b.n	8003e50 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d010      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	4b81      	ldr	r3, [pc, #516]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d908      	bls.n	8003c72 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c60:	4b7e      	ldr	r3, [pc, #504]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	497b      	ldr	r1, [pc, #492]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d079      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d11e      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c86:	4b75      	ldr	r3, [pc, #468]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e0dc      	b.n	8003e50 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003c96:	f000 f9dd 	bl	8004054 <RCC_GetSysClockFreqFromPLLSource>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4a70      	ldr	r2, [pc, #448]	; (8003e60 <HAL_RCC_ClockConfig+0x264>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d946      	bls.n	8003d30 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003ca2:	4b6e      	ldr	r3, [pc, #440]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d140      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cae:	4b6b      	ldr	r3, [pc, #428]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cb6:	4a69      	ldr	r2, [pc, #420]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003cbe:	2380      	movs	r3, #128	; 0x80
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	e035      	b.n	8003d30 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d107      	bne.n	8003cdc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ccc:	4b63      	ldr	r3, [pc, #396]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d115      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0b9      	b.n	8003e50 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d107      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ce4:	4b5d      	ldr	r3, [pc, #372]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d109      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0ad      	b.n	8003e50 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cf4:	4b59      	ldr	r3, [pc, #356]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0a5      	b.n	8003e50 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003d04:	f000 f8b4 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	4a55      	ldr	r2, [pc, #340]	; (8003e60 <HAL_RCC_ClockConfig+0x264>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d90f      	bls.n	8003d30 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003d10:	4b52      	ldr	r3, [pc, #328]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d109      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d1c:	4b4f      	ldr	r3, [pc, #316]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d24:	4a4d      	ldr	r2, [pc, #308]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d2a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d2c:	2380      	movs	r3, #128	; 0x80
 8003d2e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d30:	4b4a      	ldr	r3, [pc, #296]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f023 0203 	bic.w	r2, r3, #3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	4947      	ldr	r1, [pc, #284]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d42:	f7fd ff6b 	bl	8001c1c <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d48:	e00a      	b.n	8003d60 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d4a:	f7fd ff67 	bl	8001c1c <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e077      	b.n	8003e50 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d60:	4b3e      	ldr	r3, [pc, #248]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 020c 	and.w	r2, r3, #12
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d1eb      	bne.n	8003d4a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2b80      	cmp	r3, #128	; 0x80
 8003d76:	d105      	bne.n	8003d84 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d78:	4b38      	ldr	r3, [pc, #224]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4a37      	ldr	r2, [pc, #220]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d82:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d010      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	4b31      	ldr	r3, [pc, #196]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d208      	bcs.n	8003db2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da0:	4b2e      	ldr	r3, [pc, #184]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	492b      	ldr	r1, [pc, #172]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003db2:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <HAL_RCC_ClockConfig+0x25c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d210      	bcs.n	8003de2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc0:	4b25      	ldr	r3, [pc, #148]	; (8003e58 <HAL_RCC_ClockConfig+0x25c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f023 020f 	bic.w	r2, r3, #15
 8003dc8:	4923      	ldr	r1, [pc, #140]	; (8003e58 <HAL_RCC_ClockConfig+0x25c>)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd0:	4b21      	ldr	r3, [pc, #132]	; (8003e58 <HAL_RCC_ClockConfig+0x25c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 030f 	and.w	r3, r3, #15
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d001      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e036      	b.n	8003e50 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dee:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	4918      	ldr	r1, [pc, #96]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d009      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e0c:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4910      	ldr	r1, [pc, #64]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e20:	f000 f826 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 8003e24:	4602      	mov	r2, r0
 8003e26:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	091b      	lsrs	r3, r3, #4
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	490c      	ldr	r1, [pc, #48]	; (8003e64 <HAL_RCC_ClockConfig+0x268>)
 8003e32:	5ccb      	ldrb	r3, [r1, r3]
 8003e34:	f003 031f 	and.w	r3, r3, #31
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3c:	4a0a      	ldr	r2, [pc, #40]	; (8003e68 <HAL_RCC_ClockConfig+0x26c>)
 8003e3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e40:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <HAL_RCC_ClockConfig+0x270>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fd fe99 	bl	8001b7c <HAL_InitTick>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	73fb      	strb	r3, [r7, #15]

  return status;
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40022000 	.word	0x40022000
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	04c4b400 	.word	0x04c4b400
 8003e64:	080065d0 	.word	0x080065d0
 8003e68:	20000000 	.word	0x20000000
 8003e6c:	20000004 	.word	0x20000004

08003e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b089      	sub	sp, #36	; 0x24
 8003e74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e7e:	4b3e      	ldr	r3, [pc, #248]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e88:	4b3b      	ldr	r3, [pc, #236]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	2b0c      	cmp	r3, #12
 8003e9c:	d121      	bne.n	8003ee2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d11e      	bne.n	8003ee2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ea4:	4b34      	ldr	r3, [pc, #208]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d107      	bne.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003eb0:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	e005      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ec0:	4b2d      	ldr	r3, [pc, #180]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ecc:	4a2b      	ldr	r2, [pc, #172]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10d      	bne.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d102      	bne.n	8003eee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ee8:	4b25      	ldr	r3, [pc, #148]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	e004      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d101      	bne.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ef4:	4b23      	ldr	r3, [pc, #140]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ef6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	2b0c      	cmp	r3, #12
 8003efc:	d134      	bne.n	8003f68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003efe:	4b1e      	ldr	r3, [pc, #120]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d003      	beq.n	8003f1c <HAL_RCC_GetSysClockFreq+0xac>
 8003f14:	e005      	b.n	8003f22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f16:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f18:	617b      	str	r3, [r7, #20]
      break;
 8003f1a:	e005      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f1c:	4b19      	ldr	r3, [pc, #100]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f1e:	617b      	str	r3, [r7, #20]
      break;
 8003f20:	e002      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	617b      	str	r3, [r7, #20]
      break;
 8003f26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f28:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	3301      	adds	r3, #1
 8003f34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f36:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	0a1b      	lsrs	r3, r3, #8
 8003f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	fb03 f202 	mul.w	r2, r3, r2
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f4e:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	0e5b      	lsrs	r3, r3, #25
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	3301      	adds	r3, #1
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f68:	69bb      	ldr	r3, [r7, #24]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3724      	adds	r7, #36	; 0x24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	080065e0 	.word	0x080065e0
 8003f80:	00f42400 	.word	0x00f42400
 8003f84:	007a1200 	.word	0x007a1200

08003f88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f8c:	4b03      	ldr	r3, [pc, #12]	; (8003f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	20000000 	.word	0x20000000

08003fa0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fa8:	2300      	movs	r3, #0
 8003faa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fac:	4b27      	ldr	r3, [pc, #156]	; (800404c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fb8:	f7ff f932 	bl	8003220 <HAL_PWREx_GetVoltageRange>
 8003fbc:	6178      	str	r0, [r7, #20]
 8003fbe:	e014      	b.n	8003fea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fc0:	4b22      	ldr	r3, [pc, #136]	; (800404c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc4:	4a21      	ldr	r2, [pc, #132]	; (800404c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fca:	6593      	str	r3, [r2, #88]	; 0x58
 8003fcc:	4b1f      	ldr	r3, [pc, #124]	; (800404c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fd8:	f7ff f922 	bl	8003220 <HAL_PWREx_GetVoltageRange>
 8003fdc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fde:	4b1b      	ldr	r3, [pc, #108]	; (800404c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe2:	4a1a      	ldr	r2, [pc, #104]	; (800404c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff0:	d10b      	bne.n	800400a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b80      	cmp	r3, #128	; 0x80
 8003ff6:	d913      	bls.n	8004020 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2ba0      	cmp	r3, #160	; 0xa0
 8003ffc:	d902      	bls.n	8004004 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ffe:	2302      	movs	r3, #2
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	e00d      	b.n	8004020 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004004:	2301      	movs	r3, #1
 8004006:	613b      	str	r3, [r7, #16]
 8004008:	e00a      	b.n	8004020 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b7f      	cmp	r3, #127	; 0x7f
 800400e:	d902      	bls.n	8004016 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004010:	2302      	movs	r3, #2
 8004012:	613b      	str	r3, [r7, #16]
 8004014:	e004      	b.n	8004020 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b70      	cmp	r3, #112	; 0x70
 800401a:	d101      	bne.n	8004020 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800401c:	2301      	movs	r3, #1
 800401e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f023 020f 	bic.w	r2, r3, #15
 8004028:	4909      	ldr	r1, [pc, #36]	; (8004050 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004030:	4b07      	ldr	r3, [pc, #28]	; (8004050 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	429a      	cmp	r2, r3
 800403c:	d001      	beq.n	8004042 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40021000 	.word	0x40021000
 8004050:	40022000 	.word	0x40022000

08004054 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800405a:	4b2d      	ldr	r3, [pc, #180]	; (8004110 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b03      	cmp	r3, #3
 8004068:	d00b      	beq.n	8004082 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b03      	cmp	r3, #3
 800406e:	d825      	bhi.n	80040bc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d008      	beq.n	8004088 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b02      	cmp	r3, #2
 800407a:	d11f      	bne.n	80040bc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800407c:	4b25      	ldr	r3, [pc, #148]	; (8004114 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800407e:	613b      	str	r3, [r7, #16]
    break;
 8004080:	e01f      	b.n	80040c2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004082:	4b25      	ldr	r3, [pc, #148]	; (8004118 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004084:	613b      	str	r3, [r7, #16]
    break;
 8004086:	e01c      	b.n	80040c2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004088:	4b21      	ldr	r3, [pc, #132]	; (8004110 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b00      	cmp	r3, #0
 8004092:	d107      	bne.n	80040a4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004094:	4b1e      	ldr	r3, [pc, #120]	; (8004110 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800409a:	0a1b      	lsrs	r3, r3, #8
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	e005      	b.n	80040b0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040a4:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	091b      	lsrs	r3, r3, #4
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80040b0:	4a1a      	ldr	r2, [pc, #104]	; (800411c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b8:	613b      	str	r3, [r7, #16]
    break;
 80040ba:	e002      	b.n	80040c2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	613b      	str	r3, [r7, #16]
    break;
 80040c0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040c2:	4b13      	ldr	r3, [pc, #76]	; (8004110 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	091b      	lsrs	r3, r3, #4
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	3301      	adds	r3, #1
 80040ce:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040d0:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	0a1b      	lsrs	r3, r3, #8
 80040d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	fb03 f202 	mul.w	r2, r3, r2
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040e8:	4b09      	ldr	r3, [pc, #36]	; (8004110 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	0e5b      	lsrs	r3, r3, #25
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	3301      	adds	r3, #1
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004102:	683b      	ldr	r3, [r7, #0]
}
 8004104:	4618      	mov	r0, r3
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	40021000 	.word	0x40021000
 8004114:	00f42400 	.word	0x00f42400
 8004118:	007a1200 	.word	0x007a1200
 800411c:	080065e0 	.word	0x080065e0

08004120 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004128:	2300      	movs	r3, #0
 800412a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800412c:	2300      	movs	r3, #0
 800412e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004138:	2b00      	cmp	r3, #0
 800413a:	d040      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004140:	2b80      	cmp	r3, #128	; 0x80
 8004142:	d02a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004144:	2b80      	cmp	r3, #128	; 0x80
 8004146:	d825      	bhi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004148:	2b60      	cmp	r3, #96	; 0x60
 800414a:	d026      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800414c:	2b60      	cmp	r3, #96	; 0x60
 800414e:	d821      	bhi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004150:	2b40      	cmp	r3, #64	; 0x40
 8004152:	d006      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004154:	2b40      	cmp	r3, #64	; 0x40
 8004156:	d81d      	bhi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d009      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800415c:	2b20      	cmp	r3, #32
 800415e:	d010      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004160:	e018      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004162:	4b89      	ldr	r3, [pc, #548]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	4a88      	ldr	r2, [pc, #544]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800416c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800416e:	e015      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3304      	adds	r3, #4
 8004174:	2100      	movs	r1, #0
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fb02 	bl	8004780 <RCCEx_PLLSAI1_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004180:	e00c      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3320      	adds	r3, #32
 8004186:	2100      	movs	r1, #0
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fbed 	bl	8004968 <RCCEx_PLLSAI2_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004192:	e003      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	74fb      	strb	r3, [r7, #19]
      break;
 8004198:	e000      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800419a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800419c:	7cfb      	ldrb	r3, [r7, #19]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10b      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041a2:	4b79      	ldr	r3, [pc, #484]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041a8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041b0:	4975      	ldr	r1, [pc, #468]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80041b8:	e001      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ba:	7cfb      	ldrb	r3, [r7, #19]
 80041bc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d047      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d2:	d030      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80041d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d8:	d82a      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80041da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041de:	d02a      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80041e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041e4:	d824      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80041e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ea:	d008      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xde>
 80041ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f0:	d81e      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xec>
 80041f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041fa:	d010      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80041fc:	e018      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041fe:	4b62      	ldr	r3, [pc, #392]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	4a61      	ldr	r2, [pc, #388]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004208:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800420a:	e015      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	2100      	movs	r1, #0
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fab4 	bl	8004780 <RCCEx_PLLSAI1_Config>
 8004218:	4603      	mov	r3, r0
 800421a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800421c:	e00c      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3320      	adds	r3, #32
 8004222:	2100      	movs	r1, #0
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fb9f 	bl	8004968 <RCCEx_PLLSAI2_Config>
 800422a:	4603      	mov	r3, r0
 800422c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800422e:	e003      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	74fb      	strb	r3, [r7, #19]
      break;
 8004234:	e000      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004238:	7cfb      	ldrb	r3, [r7, #19]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10b      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800423e:	4b52      	ldr	r3, [pc, #328]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004240:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424c:	494e      	ldr	r1, [pc, #312]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004254:	e001      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004256:	7cfb      	ldrb	r3, [r7, #19]
 8004258:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 809f 	beq.w	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004268:	2300      	movs	r3, #0
 800426a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800426c:	4b46      	ldr	r3, [pc, #280]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800426e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800427c:	2300      	movs	r3, #0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00d      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004282:	4b41      	ldr	r3, [pc, #260]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004286:	4a40      	ldr	r2, [pc, #256]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800428c:	6593      	str	r3, [r2, #88]	; 0x58
 800428e:	4b3e      	ldr	r3, [pc, #248]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004296:	60bb      	str	r3, [r7, #8]
 8004298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800429a:	2301      	movs	r3, #1
 800429c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800429e:	4b3b      	ldr	r3, [pc, #236]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a3a      	ldr	r2, [pc, #232]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042aa:	f7fd fcb7 	bl	8001c1c <HAL_GetTick>
 80042ae:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042b0:	e009      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b2:	f7fd fcb3 	bl	8001c1c <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d902      	bls.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	74fb      	strb	r3, [r7, #19]
        break;
 80042c4:	e005      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042c6:	4b31      	ldr	r3, [pc, #196]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0ef      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80042d2:	7cfb      	ldrb	r3, [r7, #19]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d15b      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042d8:	4b2b      	ldr	r3, [pc, #172]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d01f      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d019      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042f6:	4b24      	ldr	r3, [pc, #144]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004300:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004302:	4b21      	ldr	r3, [pc, #132]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004308:	4a1f      	ldr	r2, [pc, #124]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800430a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004312:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004318:	4a1b      	ldr	r2, [pc, #108]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800431a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004322:	4a19      	ldr	r2, [pc, #100]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d016      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fd fc72 	bl	8001c1c <HAL_GetTick>
 8004338:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800433a:	e00b      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433c:	f7fd fc6e 	bl	8001c1c <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f241 3288 	movw	r2, #5000	; 0x1388
 800434a:	4293      	cmp	r3, r2
 800434c:	d902      	bls.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	74fb      	strb	r3, [r7, #19]
            break;
 8004352:	e006      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004354:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0ec      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004362:	7cfb      	ldrb	r3, [r7, #19]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10c      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004368:	4b07      	ldr	r3, [pc, #28]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004378:	4903      	ldr	r1, [pc, #12]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004380:	e008      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004382:	7cfb      	ldrb	r3, [r7, #19]
 8004384:	74bb      	strb	r3, [r7, #18]
 8004386:	e005      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004388:	40021000 	.word	0x40021000
 800438c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004390:	7cfb      	ldrb	r3, [r7, #19]
 8004392:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004394:	7c7b      	ldrb	r3, [r7, #17]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d105      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439a:	4ba0      	ldr	r3, [pc, #640]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800439c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439e:	4a9f      	ldr	r2, [pc, #636]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043b2:	4b9a      	ldr	r3, [pc, #616]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b8:	f023 0203 	bic.w	r2, r3, #3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c0:	4996      	ldr	r1, [pc, #600]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043d4:	4b91      	ldr	r3, [pc, #580]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	f023 020c 	bic.w	r2, r3, #12
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	498e      	ldr	r1, [pc, #568]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043f6:	4b89      	ldr	r3, [pc, #548]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004404:	4985      	ldr	r1, [pc, #532]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004418:	4b80      	ldr	r3, [pc, #512]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004426:	497d      	ldr	r1, [pc, #500]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800443a:	4b78      	ldr	r3, [pc, #480]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004448:	4974      	ldr	r1, [pc, #464]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800445c:	4b6f      	ldr	r3, [pc, #444]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004462:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446a:	496c      	ldr	r1, [pc, #432]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800447e:	4b67      	ldr	r3, [pc, #412]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004484:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800448c:	4963      	ldr	r1, [pc, #396]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044a0:	4b5e      	ldr	r3, [pc, #376]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044ae:	495b      	ldr	r1, [pc, #364]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044c2:	4b56      	ldr	r3, [pc, #344]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d0:	4952      	ldr	r1, [pc, #328]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044e4:	4b4d      	ldr	r3, [pc, #308]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f2:	494a      	ldr	r1, [pc, #296]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004506:	4b45      	ldr	r3, [pc, #276]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004514:	4941      	ldr	r1, [pc, #260]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004528:	4b3c      	ldr	r3, [pc, #240]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800452a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800452e:	f023 0203 	bic.w	r2, r3, #3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004536:	4939      	ldr	r1, [pc, #228]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004538:	4313      	orrs	r3, r2
 800453a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d028      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800454a:	4b34      	ldr	r3, [pc, #208]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004550:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004558:	4930      	ldr	r1, [pc, #192]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004568:	d106      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800456a:	4b2c      	ldr	r3, [pc, #176]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	4a2b      	ldr	r2, [pc, #172]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004574:	60d3      	str	r3, [r2, #12]
 8004576:	e011      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004580:	d10c      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3304      	adds	r3, #4
 8004586:	2101      	movs	r1, #1
 8004588:	4618      	mov	r0, r3
 800458a:	f000 f8f9 	bl	8004780 <RCCEx_PLLSAI1_Config>
 800458e:	4603      	mov	r3, r0
 8004590:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004592:	7cfb      	ldrb	r3, [r7, #19]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d04d      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045b0:	d108      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80045b2:	4b1a      	ldr	r3, [pc, #104]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045b8:	4a18      	ldr	r2, [pc, #96]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045be:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80045c2:	e012      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80045c4:	4b15      	ldr	r3, [pc, #84]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045ca:	4a14      	ldr	r2, [pc, #80]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045d0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80045d4:	4b11      	ldr	r3, [pc, #68]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045e2:	490e      	ldr	r1, [pc, #56]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045f2:	d106      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045f4:	4b09      	ldr	r3, [pc, #36]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	4a08      	ldr	r2, [pc, #32]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045fe:	60d3      	str	r3, [r2, #12]
 8004600:	e020      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004606:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800460a:	d109      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800460c:	4b03      	ldr	r3, [pc, #12]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4a02      	ldr	r2, [pc, #8]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004616:	60d3      	str	r3, [r2, #12]
 8004618:	e014      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800461a:	bf00      	nop
 800461c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004624:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004628:	d10c      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3304      	adds	r3, #4
 800462e:	2101      	movs	r1, #1
 8004630:	4618      	mov	r0, r3
 8004632:	f000 f8a5 	bl	8004780 <RCCEx_PLLSAI1_Config>
 8004636:	4603      	mov	r3, r0
 8004638:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800463a:	7cfb      	ldrb	r3, [r7, #19]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004640:	7cfb      	ldrb	r3, [r7, #19]
 8004642:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d028      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004650:	4b4a      	ldr	r3, [pc, #296]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004656:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800465e:	4947      	ldr	r1, [pc, #284]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800466a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800466e:	d106      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004670:	4b42      	ldr	r3, [pc, #264]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4a41      	ldr	r2, [pc, #260]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800467a:	60d3      	str	r3, [r2, #12]
 800467c:	e011      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004682:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004686:	d10c      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3304      	adds	r3, #4
 800468c:	2101      	movs	r1, #1
 800468e:	4618      	mov	r0, r3
 8004690:	f000 f876 	bl	8004780 <RCCEx_PLLSAI1_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800469e:	7cfb      	ldrb	r3, [r7, #19]
 80046a0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d01e      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046ae:	4b33      	ldr	r3, [pc, #204]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046be:	492f      	ldr	r1, [pc, #188]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046d0:	d10c      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3304      	adds	r3, #4
 80046d6:	2102      	movs	r1, #2
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 f851 	bl	8004780 <RCCEx_PLLSAI1_Config>
 80046de:	4603      	mov	r3, r0
 80046e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046e2:	7cfb      	ldrb	r3, [r7, #19]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80046e8:	7cfb      	ldrb	r3, [r7, #19]
 80046ea:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00b      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046f8:	4b20      	ldr	r3, [pc, #128]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046fe:	f023 0204 	bic.w	r2, r3, #4
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004708:	491c      	ldr	r1, [pc, #112]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00b      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800471c:	4b17      	ldr	r3, [pc, #92]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800471e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004722:	f023 0218 	bic.w	r2, r3, #24
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472c:	4913      	ldr	r1, [pc, #76]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d017      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004740:	4b0e      	ldr	r3, [pc, #56]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004742:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004746:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004750:	490a      	ldr	r1, [pc, #40]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800475e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004762:	d105      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004764:	4b05      	ldr	r3, [pc, #20]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	4a04      	ldr	r2, [pc, #16]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800476a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800476e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004770:	7cbb      	ldrb	r3, [r7, #18]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40021000 	.word	0x40021000

08004780 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800478e:	4b72      	ldr	r3, [pc, #456]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00e      	beq.n	80047b8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800479a:	4b6f      	ldr	r3, [pc, #444]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0203 	and.w	r2, r3, #3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d103      	bne.n	80047b2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
       ||
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d142      	bne.n	8004838 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	73fb      	strb	r3, [r7, #15]
 80047b6:	e03f      	b.n	8004838 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d018      	beq.n	80047f2 <RCCEx_PLLSAI1_Config+0x72>
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d825      	bhi.n	8004810 <RCCEx_PLLSAI1_Config+0x90>
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d002      	beq.n	80047ce <RCCEx_PLLSAI1_Config+0x4e>
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d009      	beq.n	80047e0 <RCCEx_PLLSAI1_Config+0x60>
 80047cc:	e020      	b.n	8004810 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047ce:	4b62      	ldr	r3, [pc, #392]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d11d      	bne.n	8004816 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047de:	e01a      	b.n	8004816 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047e0:	4b5d      	ldr	r3, [pc, #372]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d116      	bne.n	800481a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047f0:	e013      	b.n	800481a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047f2:	4b59      	ldr	r3, [pc, #356]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10f      	bne.n	800481e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047fe:	4b56      	ldr	r3, [pc, #344]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800480e:	e006      	b.n	800481e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
      break;
 8004814:	e004      	b.n	8004820 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004816:	bf00      	nop
 8004818:	e002      	b.n	8004820 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800481a:	bf00      	nop
 800481c:	e000      	b.n	8004820 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800481e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d108      	bne.n	8004838 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004826:	4b4c      	ldr	r3, [pc, #304]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f023 0203 	bic.w	r2, r3, #3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4949      	ldr	r1, [pc, #292]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004834:	4313      	orrs	r3, r2
 8004836:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004838:	7bfb      	ldrb	r3, [r7, #15]
 800483a:	2b00      	cmp	r3, #0
 800483c:	f040 8086 	bne.w	800494c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004840:	4b45      	ldr	r3, [pc, #276]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a44      	ldr	r2, [pc, #272]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004846:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800484a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800484c:	f7fd f9e6 	bl	8001c1c <HAL_GetTick>
 8004850:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004852:	e009      	b.n	8004868 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004854:	f7fd f9e2 	bl	8001c1c <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d902      	bls.n	8004868 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	73fb      	strb	r3, [r7, #15]
        break;
 8004866:	e005      	b.n	8004874 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004868:	4b3b      	ldr	r3, [pc, #236]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1ef      	bne.n	8004854 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d168      	bne.n	800494c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d113      	bne.n	80048a8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004880:	4b35      	ldr	r3, [pc, #212]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	4b35      	ldr	r3, [pc, #212]	; (800495c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004886:	4013      	ands	r3, r2
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6892      	ldr	r2, [r2, #8]
 800488c:	0211      	lsls	r1, r2, #8
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	68d2      	ldr	r2, [r2, #12]
 8004892:	06d2      	lsls	r2, r2, #27
 8004894:	4311      	orrs	r1, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6852      	ldr	r2, [r2, #4]
 800489a:	3a01      	subs	r2, #1
 800489c:	0112      	lsls	r2, r2, #4
 800489e:	430a      	orrs	r2, r1
 80048a0:	492d      	ldr	r1, [pc, #180]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	610b      	str	r3, [r1, #16]
 80048a6:	e02d      	b.n	8004904 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d115      	bne.n	80048da <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048ae:	4b2a      	ldr	r3, [pc, #168]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	4b2b      	ldr	r3, [pc, #172]	; (8004960 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6892      	ldr	r2, [r2, #8]
 80048ba:	0211      	lsls	r1, r2, #8
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6912      	ldr	r2, [r2, #16]
 80048c0:	0852      	lsrs	r2, r2, #1
 80048c2:	3a01      	subs	r2, #1
 80048c4:	0552      	lsls	r2, r2, #21
 80048c6:	4311      	orrs	r1, r2
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6852      	ldr	r2, [r2, #4]
 80048cc:	3a01      	subs	r2, #1
 80048ce:	0112      	lsls	r2, r2, #4
 80048d0:	430a      	orrs	r2, r1
 80048d2:	4921      	ldr	r1, [pc, #132]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	610b      	str	r3, [r1, #16]
 80048d8:	e014      	b.n	8004904 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048da:	4b1f      	ldr	r3, [pc, #124]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	4b21      	ldr	r3, [pc, #132]	; (8004964 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6892      	ldr	r2, [r2, #8]
 80048e6:	0211      	lsls	r1, r2, #8
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6952      	ldr	r2, [r2, #20]
 80048ec:	0852      	lsrs	r2, r2, #1
 80048ee:	3a01      	subs	r2, #1
 80048f0:	0652      	lsls	r2, r2, #25
 80048f2:	4311      	orrs	r1, r2
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6852      	ldr	r2, [r2, #4]
 80048f8:	3a01      	subs	r2, #1
 80048fa:	0112      	lsls	r2, r2, #4
 80048fc:	430a      	orrs	r2, r1
 80048fe:	4916      	ldr	r1, [pc, #88]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004900:	4313      	orrs	r3, r2
 8004902:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004904:	4b14      	ldr	r3, [pc, #80]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a13      	ldr	r2, [pc, #76]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 800490a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800490e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004910:	f7fd f984 	bl	8001c1c <HAL_GetTick>
 8004914:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004916:	e009      	b.n	800492c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004918:	f7fd f980 	bl	8001c1c <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d902      	bls.n	800492c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	73fb      	strb	r3, [r7, #15]
          break;
 800492a:	e005      	b.n	8004938 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800492c:	4b0a      	ldr	r3, [pc, #40]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0ef      	beq.n	8004918 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800493e:	4b06      	ldr	r3, [pc, #24]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004940:	691a      	ldr	r2, [r3, #16]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	4904      	ldr	r1, [pc, #16]	; (8004958 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004948:	4313      	orrs	r3, r2
 800494a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800494c:	7bfb      	ldrb	r3, [r7, #15]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40021000 	.word	0x40021000
 800495c:	07ff800f 	.word	0x07ff800f
 8004960:	ff9f800f 	.word	0xff9f800f
 8004964:	f9ff800f 	.word	0xf9ff800f

08004968 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004976:	4b72      	ldr	r3, [pc, #456]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00e      	beq.n	80049a0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004982:	4b6f      	ldr	r3, [pc, #444]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f003 0203 	and.w	r2, r3, #3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d103      	bne.n	800499a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
       ||
 8004996:	2b00      	cmp	r3, #0
 8004998:	d142      	bne.n	8004a20 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	73fb      	strb	r3, [r7, #15]
 800499e:	e03f      	b.n	8004a20 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d018      	beq.n	80049da <RCCEx_PLLSAI2_Config+0x72>
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d825      	bhi.n	80049f8 <RCCEx_PLLSAI2_Config+0x90>
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d002      	beq.n	80049b6 <RCCEx_PLLSAI2_Config+0x4e>
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d009      	beq.n	80049c8 <RCCEx_PLLSAI2_Config+0x60>
 80049b4:	e020      	b.n	80049f8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049b6:	4b62      	ldr	r3, [pc, #392]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d11d      	bne.n	80049fe <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c6:	e01a      	b.n	80049fe <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049c8:	4b5d      	ldr	r3, [pc, #372]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d116      	bne.n	8004a02 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049d8:	e013      	b.n	8004a02 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049da:	4b59      	ldr	r3, [pc, #356]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10f      	bne.n	8004a06 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049e6:	4b56      	ldr	r3, [pc, #344]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d109      	bne.n	8004a06 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049f6:	e006      	b.n	8004a06 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
      break;
 80049fc:	e004      	b.n	8004a08 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80049fe:	bf00      	nop
 8004a00:	e002      	b.n	8004a08 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004a02:	bf00      	nop
 8004a04:	e000      	b.n	8004a08 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004a06:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d108      	bne.n	8004a20 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004a0e:	4b4c      	ldr	r3, [pc, #304]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f023 0203 	bic.w	r2, r3, #3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4949      	ldr	r1, [pc, #292]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f040 8086 	bne.w	8004b34 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a28:	4b45      	ldr	r3, [pc, #276]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a44      	ldr	r2, [pc, #272]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a34:	f7fd f8f2 	bl	8001c1c <HAL_GetTick>
 8004a38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a3a:	e009      	b.n	8004a50 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a3c:	f7fd f8ee 	bl	8001c1c <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d902      	bls.n	8004a50 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a4e:	e005      	b.n	8004a5c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a50:	4b3b      	ldr	r3, [pc, #236]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1ef      	bne.n	8004a3c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d168      	bne.n	8004b34 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d113      	bne.n	8004a90 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a68:	4b35      	ldr	r3, [pc, #212]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a6a:	695a      	ldr	r2, [r3, #20]
 8004a6c:	4b35      	ldr	r3, [pc, #212]	; (8004b44 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6892      	ldr	r2, [r2, #8]
 8004a74:	0211      	lsls	r1, r2, #8
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68d2      	ldr	r2, [r2, #12]
 8004a7a:	06d2      	lsls	r2, r2, #27
 8004a7c:	4311      	orrs	r1, r2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6852      	ldr	r2, [r2, #4]
 8004a82:	3a01      	subs	r2, #1
 8004a84:	0112      	lsls	r2, r2, #4
 8004a86:	430a      	orrs	r2, r1
 8004a88:	492d      	ldr	r1, [pc, #180]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	614b      	str	r3, [r1, #20]
 8004a8e:	e02d      	b.n	8004aec <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d115      	bne.n	8004ac2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a96:	4b2a      	ldr	r3, [pc, #168]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a98:	695a      	ldr	r2, [r3, #20]
 8004a9a:	4b2b      	ldr	r3, [pc, #172]	; (8004b48 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6892      	ldr	r2, [r2, #8]
 8004aa2:	0211      	lsls	r1, r2, #8
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6912      	ldr	r2, [r2, #16]
 8004aa8:	0852      	lsrs	r2, r2, #1
 8004aaa:	3a01      	subs	r2, #1
 8004aac:	0552      	lsls	r2, r2, #21
 8004aae:	4311      	orrs	r1, r2
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6852      	ldr	r2, [r2, #4]
 8004ab4:	3a01      	subs	r2, #1
 8004ab6:	0112      	lsls	r2, r2, #4
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	4921      	ldr	r1, [pc, #132]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	614b      	str	r3, [r1, #20]
 8004ac0:	e014      	b.n	8004aec <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ac2:	4b1f      	ldr	r3, [pc, #124]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ac4:	695a      	ldr	r2, [r3, #20]
 8004ac6:	4b21      	ldr	r3, [pc, #132]	; (8004b4c <RCCEx_PLLSAI2_Config+0x1e4>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6892      	ldr	r2, [r2, #8]
 8004ace:	0211      	lsls	r1, r2, #8
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6952      	ldr	r2, [r2, #20]
 8004ad4:	0852      	lsrs	r2, r2, #1
 8004ad6:	3a01      	subs	r2, #1
 8004ad8:	0652      	lsls	r2, r2, #25
 8004ada:	4311      	orrs	r1, r2
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6852      	ldr	r2, [r2, #4]
 8004ae0:	3a01      	subs	r2, #1
 8004ae2:	0112      	lsls	r2, r2, #4
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	4916      	ldr	r1, [pc, #88]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004aec:	4b14      	ldr	r3, [pc, #80]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a13      	ldr	r2, [pc, #76]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af8:	f7fd f890 	bl	8001c1c <HAL_GetTick>
 8004afc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004afe:	e009      	b.n	8004b14 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b00:	f7fd f88c 	bl	8001c1c <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d902      	bls.n	8004b14 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	73fb      	strb	r3, [r7, #15]
          break;
 8004b12:	e005      	b.n	8004b20 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b14:	4b0a      	ldr	r3, [pc, #40]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0ef      	beq.n	8004b00 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b26:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b28:	695a      	ldr	r2, [r3, #20]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	4904      	ldr	r1, [pc, #16]	; (8004b40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40021000 	.word	0x40021000
 8004b44:	07ff800f 	.word	0x07ff800f
 8004b48:	ff9f800f 	.word	0xff9f800f
 8004b4c:	f9ff800f 	.word	0xf9ff800f

08004b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e049      	b.n	8004bf6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fc fef4 	bl	8001964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4610      	mov	r0, r2
 8004b90:	f000 faca 	bl	8005128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6a1a      	ldr	r2, [r3, #32]
 8004c0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c10:	4013      	ands	r3, r2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10f      	bne.n	8004c36 <HAL_TIM_Base_Stop+0x38>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6a1a      	ldr	r2, [r3, #32]
 8004c1c:	f240 4344 	movw	r3, #1092	; 0x444
 8004c20:	4013      	ands	r3, r2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d107      	bne.n	8004c36 <HAL_TIM_Base_Stop+0x38>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0201 	bic.w	r2, r2, #1
 8004c34:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d001      	beq.n	8004c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e04f      	b.n	8004d04 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a23      	ldr	r2, [pc, #140]	; (8004d10 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d01d      	beq.n	8004cc2 <HAL_TIM_Base_Start_IT+0x76>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8e:	d018      	beq.n	8004cc2 <HAL_TIM_Base_Start_IT+0x76>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a1f      	ldr	r2, [pc, #124]	; (8004d14 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d013      	beq.n	8004cc2 <HAL_TIM_Base_Start_IT+0x76>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a1e      	ldr	r2, [pc, #120]	; (8004d18 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00e      	beq.n	8004cc2 <HAL_TIM_Base_Start_IT+0x76>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a1c      	ldr	r2, [pc, #112]	; (8004d1c <HAL_TIM_Base_Start_IT+0xd0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d009      	beq.n	8004cc2 <HAL_TIM_Base_Start_IT+0x76>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a1b      	ldr	r2, [pc, #108]	; (8004d20 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d004      	beq.n	8004cc2 <HAL_TIM_Base_Start_IT+0x76>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a19      	ldr	r2, [pc, #100]	; (8004d24 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d115      	bne.n	8004cee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	4b17      	ldr	r3, [pc, #92]	; (8004d28 <HAL_TIM_Base_Start_IT+0xdc>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b06      	cmp	r3, #6
 8004cd2:	d015      	beq.n	8004d00 <HAL_TIM_Base_Start_IT+0xb4>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cda:	d011      	beq.n	8004d00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cec:	e008      	b.n	8004d00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0201 	orr.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	e000      	b.n	8004d02 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	40012c00 	.word	0x40012c00
 8004d14:	40000400 	.word	0x40000400
 8004d18:	40000800 	.word	0x40000800
 8004d1c:	40000c00 	.word	0x40000c00
 8004d20:	40013400 	.word	0x40013400
 8004d24:	40014000 	.word	0x40014000
 8004d28:	00010007 	.word	0x00010007

08004d2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d020      	beq.n	8004d90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01b      	beq.n	8004d90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0202 	mvn.w	r2, #2
 8004d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f9b7 	bl	80050ea <HAL_TIM_IC_CaptureCallback>
 8004d7c:	e005      	b.n	8004d8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f9a9 	bl	80050d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f9ba 	bl	80050fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d020      	beq.n	8004ddc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d01b      	beq.n	8004ddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0204 	mvn.w	r2, #4
 8004dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2202      	movs	r2, #2
 8004db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f991 	bl	80050ea <HAL_TIM_IC_CaptureCallback>
 8004dc8:	e005      	b.n	8004dd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f983 	bl	80050d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f994 	bl	80050fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d020      	beq.n	8004e28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f003 0308 	and.w	r3, r3, #8
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01b      	beq.n	8004e28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0208 	mvn.w	r2, #8
 8004df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2204      	movs	r2, #4
 8004dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f96b 	bl	80050ea <HAL_TIM_IC_CaptureCallback>
 8004e14:	e005      	b.n	8004e22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f95d 	bl	80050d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f96e 	bl	80050fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d020      	beq.n	8004e74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01b      	beq.n	8004e74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f06f 0210 	mvn.w	r2, #16
 8004e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2208      	movs	r2, #8
 8004e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f945 	bl	80050ea <HAL_TIM_IC_CaptureCallback>
 8004e60:	e005      	b.n	8004e6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f937 	bl	80050d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f948 	bl	80050fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00c      	beq.n	8004e98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d007      	beq.n	8004e98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0201 	mvn.w	r2, #1
 8004e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f915 	bl	80050c2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00c      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d007      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fafc 	bl	80054b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00c      	beq.n	8004ee0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d007      	beq.n	8004ee0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 faf4 	bl	80054c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00c      	beq.n	8004f04 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d007      	beq.n	8004f04 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f907 	bl	8005112 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00c      	beq.n	8004f28 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f003 0320 	and.w	r3, r3, #32
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d007      	beq.n	8004f28 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f06f 0220 	mvn.w	r2, #32
 8004f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fabc 	bl	80054a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f28:	bf00      	nop
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d101      	bne.n	8004f4c <HAL_TIM_ConfigClockSource+0x1c>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	e0b6      	b.n	80050ba <HAL_TIM_ConfigClockSource+0x18a>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f88:	d03e      	beq.n	8005008 <HAL_TIM_ConfigClockSource+0xd8>
 8004f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f8e:	f200 8087 	bhi.w	80050a0 <HAL_TIM_ConfigClockSource+0x170>
 8004f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f96:	f000 8086 	beq.w	80050a6 <HAL_TIM_ConfigClockSource+0x176>
 8004f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f9e:	d87f      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x170>
 8004fa0:	2b70      	cmp	r3, #112	; 0x70
 8004fa2:	d01a      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0xaa>
 8004fa4:	2b70      	cmp	r3, #112	; 0x70
 8004fa6:	d87b      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x170>
 8004fa8:	2b60      	cmp	r3, #96	; 0x60
 8004faa:	d050      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x11e>
 8004fac:	2b60      	cmp	r3, #96	; 0x60
 8004fae:	d877      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x170>
 8004fb0:	2b50      	cmp	r3, #80	; 0x50
 8004fb2:	d03c      	beq.n	800502e <HAL_TIM_ConfigClockSource+0xfe>
 8004fb4:	2b50      	cmp	r3, #80	; 0x50
 8004fb6:	d873      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x170>
 8004fb8:	2b40      	cmp	r3, #64	; 0x40
 8004fba:	d058      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x13e>
 8004fbc:	2b40      	cmp	r3, #64	; 0x40
 8004fbe:	d86f      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x170>
 8004fc0:	2b30      	cmp	r3, #48	; 0x30
 8004fc2:	d064      	beq.n	800508e <HAL_TIM_ConfigClockSource+0x15e>
 8004fc4:	2b30      	cmp	r3, #48	; 0x30
 8004fc6:	d86b      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x170>
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	d060      	beq.n	800508e <HAL_TIM_ConfigClockSource+0x15e>
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	d867      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x170>
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d05c      	beq.n	800508e <HAL_TIM_ConfigClockSource+0x15e>
 8004fd4:	2b10      	cmp	r3, #16
 8004fd6:	d05a      	beq.n	800508e <HAL_TIM_ConfigClockSource+0x15e>
 8004fd8:	e062      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fea:	f000 f9b1 	bl	8005350 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ffc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	609a      	str	r2, [r3, #8]
      break;
 8005006:	e04f      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005018:	f000 f99a 	bl	8005350 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800502a:	609a      	str	r2, [r3, #8]
      break;
 800502c:	e03c      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800503a:	461a      	mov	r2, r3
 800503c:	f000 f90e 	bl	800525c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2150      	movs	r1, #80	; 0x50
 8005046:	4618      	mov	r0, r3
 8005048:	f000 f967 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 800504c:	e02c      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800505a:	461a      	mov	r2, r3
 800505c:	f000 f92d 	bl	80052ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2160      	movs	r1, #96	; 0x60
 8005066:	4618      	mov	r0, r3
 8005068:	f000 f957 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 800506c:	e01c      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800507a:	461a      	mov	r2, r3
 800507c:	f000 f8ee 	bl	800525c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2140      	movs	r1, #64	; 0x40
 8005086:	4618      	mov	r0, r3
 8005088:	f000 f947 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 800508c:	e00c      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4619      	mov	r1, r3
 8005098:	4610      	mov	r0, r2
 800509a:	f000 f93e 	bl	800531a <TIM_ITRx_SetConfig>
      break;
 800509e:	e003      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	73fb      	strb	r3, [r7, #15]
      break;
 80050a4:	e000      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80050a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
	...

08005128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a40      	ldr	r2, [pc, #256]	; (800523c <TIM_Base_SetConfig+0x114>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d013      	beq.n	8005168 <TIM_Base_SetConfig+0x40>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005146:	d00f      	beq.n	8005168 <TIM_Base_SetConfig+0x40>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a3d      	ldr	r2, [pc, #244]	; (8005240 <TIM_Base_SetConfig+0x118>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00b      	beq.n	8005168 <TIM_Base_SetConfig+0x40>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a3c      	ldr	r2, [pc, #240]	; (8005244 <TIM_Base_SetConfig+0x11c>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d007      	beq.n	8005168 <TIM_Base_SetConfig+0x40>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a3b      	ldr	r2, [pc, #236]	; (8005248 <TIM_Base_SetConfig+0x120>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d003      	beq.n	8005168 <TIM_Base_SetConfig+0x40>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a3a      	ldr	r2, [pc, #232]	; (800524c <TIM_Base_SetConfig+0x124>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d108      	bne.n	800517a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a2f      	ldr	r2, [pc, #188]	; (800523c <TIM_Base_SetConfig+0x114>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d01f      	beq.n	80051c2 <TIM_Base_SetConfig+0x9a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005188:	d01b      	beq.n	80051c2 <TIM_Base_SetConfig+0x9a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a2c      	ldr	r2, [pc, #176]	; (8005240 <TIM_Base_SetConfig+0x118>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d017      	beq.n	80051c2 <TIM_Base_SetConfig+0x9a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a2b      	ldr	r2, [pc, #172]	; (8005244 <TIM_Base_SetConfig+0x11c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d013      	beq.n	80051c2 <TIM_Base_SetConfig+0x9a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a2a      	ldr	r2, [pc, #168]	; (8005248 <TIM_Base_SetConfig+0x120>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00f      	beq.n	80051c2 <TIM_Base_SetConfig+0x9a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a29      	ldr	r2, [pc, #164]	; (800524c <TIM_Base_SetConfig+0x124>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00b      	beq.n	80051c2 <TIM_Base_SetConfig+0x9a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a28      	ldr	r2, [pc, #160]	; (8005250 <TIM_Base_SetConfig+0x128>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d007      	beq.n	80051c2 <TIM_Base_SetConfig+0x9a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a27      	ldr	r2, [pc, #156]	; (8005254 <TIM_Base_SetConfig+0x12c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d003      	beq.n	80051c2 <TIM_Base_SetConfig+0x9a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a26      	ldr	r2, [pc, #152]	; (8005258 <TIM_Base_SetConfig+0x130>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d108      	bne.n	80051d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a10      	ldr	r2, [pc, #64]	; (800523c <TIM_Base_SetConfig+0x114>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00f      	beq.n	8005220 <TIM_Base_SetConfig+0xf8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a12      	ldr	r2, [pc, #72]	; (800524c <TIM_Base_SetConfig+0x124>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00b      	beq.n	8005220 <TIM_Base_SetConfig+0xf8>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a11      	ldr	r2, [pc, #68]	; (8005250 <TIM_Base_SetConfig+0x128>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d007      	beq.n	8005220 <TIM_Base_SetConfig+0xf8>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a10      	ldr	r2, [pc, #64]	; (8005254 <TIM_Base_SetConfig+0x12c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_Base_SetConfig+0xf8>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a0f      	ldr	r2, [pc, #60]	; (8005258 <TIM_Base_SetConfig+0x130>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d103      	bne.n	8005228 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	691a      	ldr	r2, [r3, #16]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	615a      	str	r2, [r3, #20]
}
 800522e:	bf00      	nop
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	40012c00 	.word	0x40012c00
 8005240:	40000400 	.word	0x40000400
 8005244:	40000800 	.word	0x40000800
 8005248:	40000c00 	.word	0x40000c00
 800524c:	40013400 	.word	0x40013400
 8005250:	40014000 	.word	0x40014000
 8005254:	40014400 	.word	0x40014400
 8005258:	40014800 	.word	0x40014800

0800525c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	f023 0201 	bic.w	r2, r3, #1
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f023 030a 	bic.w	r3, r3, #10
 8005298:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	621a      	str	r2, [r3, #32]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b087      	sub	sp, #28
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	f023 0210 	bic.w	r2, r3, #16
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	031b      	lsls	r3, r3, #12
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	621a      	str	r2, [r3, #32]
}
 800530e:	bf00      	nop
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005330:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	f043 0307 	orr.w	r3, r3, #7
 800533c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	609a      	str	r2, [r3, #8]
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800536a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	021a      	lsls	r2, r3, #8
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	431a      	orrs	r2, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4313      	orrs	r3, r2
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	609a      	str	r2, [r3, #8]
}
 8005384:	bf00      	nop
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053a4:	2302      	movs	r3, #2
 80053a6:	e068      	b.n	800547a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a2e      	ldr	r2, [pc, #184]	; (8005488 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d004      	beq.n	80053dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a2d      	ldr	r2, [pc, #180]	; (800548c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d108      	bne.n	80053ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a1e      	ldr	r2, [pc, #120]	; (8005488 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d01d      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541a:	d018      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a1b      	ldr	r2, [pc, #108]	; (8005490 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d013      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1a      	ldr	r2, [pc, #104]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00e      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a18      	ldr	r2, [pc, #96]	; (8005498 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d009      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a13      	ldr	r2, [pc, #76]	; (800548c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d004      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a14      	ldr	r2, [pc, #80]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d10c      	bne.n	8005468 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005454:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	4313      	orrs	r3, r2
 800545e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	40012c00 	.word	0x40012c00
 800548c:	40013400 	.word	0x40013400
 8005490:	40000400 	.word	0x40000400
 8005494:	40000800 	.word	0x40000800
 8005498:	40000c00 	.word	0x40000c00
 800549c:	40014000 	.word	0x40014000

080054a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <memset>:
 80054dc:	4402      	add	r2, r0
 80054de:	4603      	mov	r3, r0
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d100      	bne.n	80054e6 <memset+0xa>
 80054e4:	4770      	bx	lr
 80054e6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ea:	e7f9      	b.n	80054e0 <memset+0x4>

080054ec <__libc_init_array>:
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	4d0d      	ldr	r5, [pc, #52]	; (8005524 <__libc_init_array+0x38>)
 80054f0:	4c0d      	ldr	r4, [pc, #52]	; (8005528 <__libc_init_array+0x3c>)
 80054f2:	1b64      	subs	r4, r4, r5
 80054f4:	10a4      	asrs	r4, r4, #2
 80054f6:	2600      	movs	r6, #0
 80054f8:	42a6      	cmp	r6, r4
 80054fa:	d109      	bne.n	8005510 <__libc_init_array+0x24>
 80054fc:	4d0b      	ldr	r5, [pc, #44]	; (800552c <__libc_init_array+0x40>)
 80054fe:	4c0c      	ldr	r4, [pc, #48]	; (8005530 <__libc_init_array+0x44>)
 8005500:	f001 f85a 	bl	80065b8 <_init>
 8005504:	1b64      	subs	r4, r4, r5
 8005506:	10a4      	asrs	r4, r4, #2
 8005508:	2600      	movs	r6, #0
 800550a:	42a6      	cmp	r6, r4
 800550c:	d105      	bne.n	800551a <__libc_init_array+0x2e>
 800550e:	bd70      	pop	{r4, r5, r6, pc}
 8005510:	f855 3b04 	ldr.w	r3, [r5], #4
 8005514:	4798      	blx	r3
 8005516:	3601      	adds	r6, #1
 8005518:	e7ee      	b.n	80054f8 <__libc_init_array+0xc>
 800551a:	f855 3b04 	ldr.w	r3, [r5], #4
 800551e:	4798      	blx	r3
 8005520:	3601      	adds	r6, #1
 8005522:	e7f2      	b.n	800550a <__libc_init_array+0x1e>
 8005524:	080067e8 	.word	0x080067e8
 8005528:	080067e8 	.word	0x080067e8
 800552c:	080067e8 	.word	0x080067e8
 8005530:	080067ec 	.word	0x080067ec
 8005534:	00000000 	.word	0x00000000

08005538 <sin>:
 8005538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800553a:	ec53 2b10 	vmov	r2, r3, d0
 800553e:	4828      	ldr	r0, [pc, #160]	; (80055e0 <sin+0xa8>)
 8005540:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005544:	4281      	cmp	r1, r0
 8005546:	dc07      	bgt.n	8005558 <sin+0x20>
 8005548:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80055d8 <sin+0xa0>
 800554c:	2000      	movs	r0, #0
 800554e:	b005      	add	sp, #20
 8005550:	f85d eb04 	ldr.w	lr, [sp], #4
 8005554:	f000 b910 	b.w	8005778 <__kernel_sin>
 8005558:	4822      	ldr	r0, [pc, #136]	; (80055e4 <sin+0xac>)
 800555a:	4281      	cmp	r1, r0
 800555c:	dd09      	ble.n	8005572 <sin+0x3a>
 800555e:	ee10 0a10 	vmov	r0, s0
 8005562:	4619      	mov	r1, r3
 8005564:	f7fa fe50 	bl	8000208 <__aeabi_dsub>
 8005568:	ec41 0b10 	vmov	d0, r0, r1
 800556c:	b005      	add	sp, #20
 800556e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005572:	4668      	mov	r0, sp
 8005574:	f000 f9c0 	bl	80058f8 <__ieee754_rem_pio2>
 8005578:	f000 0003 	and.w	r0, r0, #3
 800557c:	2801      	cmp	r0, #1
 800557e:	d00c      	beq.n	800559a <sin+0x62>
 8005580:	2802      	cmp	r0, #2
 8005582:	d011      	beq.n	80055a8 <sin+0x70>
 8005584:	b9f0      	cbnz	r0, 80055c4 <sin+0x8c>
 8005586:	ed9d 1b02 	vldr	d1, [sp, #8]
 800558a:	ed9d 0b00 	vldr	d0, [sp]
 800558e:	2001      	movs	r0, #1
 8005590:	f000 f8f2 	bl	8005778 <__kernel_sin>
 8005594:	ec51 0b10 	vmov	r0, r1, d0
 8005598:	e7e6      	b.n	8005568 <sin+0x30>
 800559a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800559e:	ed9d 0b00 	vldr	d0, [sp]
 80055a2:	f000 f821 	bl	80055e8 <__kernel_cos>
 80055a6:	e7f5      	b.n	8005594 <sin+0x5c>
 80055a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80055ac:	ed9d 0b00 	vldr	d0, [sp]
 80055b0:	2001      	movs	r0, #1
 80055b2:	f000 f8e1 	bl	8005778 <__kernel_sin>
 80055b6:	ec53 2b10 	vmov	r2, r3, d0
 80055ba:	ee10 0a10 	vmov	r0, s0
 80055be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80055c2:	e7d1      	b.n	8005568 <sin+0x30>
 80055c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80055c8:	ed9d 0b00 	vldr	d0, [sp]
 80055cc:	f000 f80c 	bl	80055e8 <__kernel_cos>
 80055d0:	e7f1      	b.n	80055b6 <sin+0x7e>
 80055d2:	bf00      	nop
 80055d4:	f3af 8000 	nop.w
	...
 80055e0:	3fe921fb 	.word	0x3fe921fb
 80055e4:	7fefffff 	.word	0x7fefffff

080055e8 <__kernel_cos>:
 80055e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ec:	ec57 6b10 	vmov	r6, r7, d0
 80055f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80055f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80055f8:	ed8d 1b00 	vstr	d1, [sp]
 80055fc:	da07      	bge.n	800560e <__kernel_cos+0x26>
 80055fe:	ee10 0a10 	vmov	r0, s0
 8005602:	4639      	mov	r1, r7
 8005604:	f7fb fa52 	bl	8000aac <__aeabi_d2iz>
 8005608:	2800      	cmp	r0, #0
 800560a:	f000 8088 	beq.w	800571e <__kernel_cos+0x136>
 800560e:	4632      	mov	r2, r6
 8005610:	463b      	mov	r3, r7
 8005612:	4630      	mov	r0, r6
 8005614:	4639      	mov	r1, r7
 8005616:	f7fa ffaf 	bl	8000578 <__aeabi_dmul>
 800561a:	4b51      	ldr	r3, [pc, #324]	; (8005760 <__kernel_cos+0x178>)
 800561c:	2200      	movs	r2, #0
 800561e:	4604      	mov	r4, r0
 8005620:	460d      	mov	r5, r1
 8005622:	f7fa ffa9 	bl	8000578 <__aeabi_dmul>
 8005626:	a340      	add	r3, pc, #256	; (adr r3, 8005728 <__kernel_cos+0x140>)
 8005628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562c:	4682      	mov	sl, r0
 800562e:	468b      	mov	fp, r1
 8005630:	4620      	mov	r0, r4
 8005632:	4629      	mov	r1, r5
 8005634:	f7fa ffa0 	bl	8000578 <__aeabi_dmul>
 8005638:	a33d      	add	r3, pc, #244	; (adr r3, 8005730 <__kernel_cos+0x148>)
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	f7fa fde5 	bl	800020c <__adddf3>
 8005642:	4622      	mov	r2, r4
 8005644:	462b      	mov	r3, r5
 8005646:	f7fa ff97 	bl	8000578 <__aeabi_dmul>
 800564a:	a33b      	add	r3, pc, #236	; (adr r3, 8005738 <__kernel_cos+0x150>)
 800564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005650:	f7fa fdda 	bl	8000208 <__aeabi_dsub>
 8005654:	4622      	mov	r2, r4
 8005656:	462b      	mov	r3, r5
 8005658:	f7fa ff8e 	bl	8000578 <__aeabi_dmul>
 800565c:	a338      	add	r3, pc, #224	; (adr r3, 8005740 <__kernel_cos+0x158>)
 800565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005662:	f7fa fdd3 	bl	800020c <__adddf3>
 8005666:	4622      	mov	r2, r4
 8005668:	462b      	mov	r3, r5
 800566a:	f7fa ff85 	bl	8000578 <__aeabi_dmul>
 800566e:	a336      	add	r3, pc, #216	; (adr r3, 8005748 <__kernel_cos+0x160>)
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f7fa fdc8 	bl	8000208 <__aeabi_dsub>
 8005678:	4622      	mov	r2, r4
 800567a:	462b      	mov	r3, r5
 800567c:	f7fa ff7c 	bl	8000578 <__aeabi_dmul>
 8005680:	a333      	add	r3, pc, #204	; (adr r3, 8005750 <__kernel_cos+0x168>)
 8005682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005686:	f7fa fdc1 	bl	800020c <__adddf3>
 800568a:	4622      	mov	r2, r4
 800568c:	462b      	mov	r3, r5
 800568e:	f7fa ff73 	bl	8000578 <__aeabi_dmul>
 8005692:	4622      	mov	r2, r4
 8005694:	462b      	mov	r3, r5
 8005696:	f7fa ff6f 	bl	8000578 <__aeabi_dmul>
 800569a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800569e:	4604      	mov	r4, r0
 80056a0:	460d      	mov	r5, r1
 80056a2:	4630      	mov	r0, r6
 80056a4:	4639      	mov	r1, r7
 80056a6:	f7fa ff67 	bl	8000578 <__aeabi_dmul>
 80056aa:	460b      	mov	r3, r1
 80056ac:	4602      	mov	r2, r0
 80056ae:	4629      	mov	r1, r5
 80056b0:	4620      	mov	r0, r4
 80056b2:	f7fa fda9 	bl	8000208 <__aeabi_dsub>
 80056b6:	4b2b      	ldr	r3, [pc, #172]	; (8005764 <__kernel_cos+0x17c>)
 80056b8:	4598      	cmp	r8, r3
 80056ba:	4606      	mov	r6, r0
 80056bc:	460f      	mov	r7, r1
 80056be:	dc10      	bgt.n	80056e2 <__kernel_cos+0xfa>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4650      	mov	r0, sl
 80056c6:	4659      	mov	r1, fp
 80056c8:	f7fa fd9e 	bl	8000208 <__aeabi_dsub>
 80056cc:	460b      	mov	r3, r1
 80056ce:	4926      	ldr	r1, [pc, #152]	; (8005768 <__kernel_cos+0x180>)
 80056d0:	4602      	mov	r2, r0
 80056d2:	2000      	movs	r0, #0
 80056d4:	f7fa fd98 	bl	8000208 <__aeabi_dsub>
 80056d8:	ec41 0b10 	vmov	d0, r0, r1
 80056dc:	b003      	add	sp, #12
 80056de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e2:	4b22      	ldr	r3, [pc, #136]	; (800576c <__kernel_cos+0x184>)
 80056e4:	4920      	ldr	r1, [pc, #128]	; (8005768 <__kernel_cos+0x180>)
 80056e6:	4598      	cmp	r8, r3
 80056e8:	bfcc      	ite	gt
 80056ea:	4d21      	ldrgt	r5, [pc, #132]	; (8005770 <__kernel_cos+0x188>)
 80056ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80056f0:	2400      	movs	r4, #0
 80056f2:	4622      	mov	r2, r4
 80056f4:	462b      	mov	r3, r5
 80056f6:	2000      	movs	r0, #0
 80056f8:	f7fa fd86 	bl	8000208 <__aeabi_dsub>
 80056fc:	4622      	mov	r2, r4
 80056fe:	4680      	mov	r8, r0
 8005700:	4689      	mov	r9, r1
 8005702:	462b      	mov	r3, r5
 8005704:	4650      	mov	r0, sl
 8005706:	4659      	mov	r1, fp
 8005708:	f7fa fd7e 	bl	8000208 <__aeabi_dsub>
 800570c:	4632      	mov	r2, r6
 800570e:	463b      	mov	r3, r7
 8005710:	f7fa fd7a 	bl	8000208 <__aeabi_dsub>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4640      	mov	r0, r8
 800571a:	4649      	mov	r1, r9
 800571c:	e7da      	b.n	80056d4 <__kernel_cos+0xec>
 800571e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005758 <__kernel_cos+0x170>
 8005722:	e7db      	b.n	80056dc <__kernel_cos+0xf4>
 8005724:	f3af 8000 	nop.w
 8005728:	be8838d4 	.word	0xbe8838d4
 800572c:	bda8fae9 	.word	0xbda8fae9
 8005730:	bdb4b1c4 	.word	0xbdb4b1c4
 8005734:	3e21ee9e 	.word	0x3e21ee9e
 8005738:	809c52ad 	.word	0x809c52ad
 800573c:	3e927e4f 	.word	0x3e927e4f
 8005740:	19cb1590 	.word	0x19cb1590
 8005744:	3efa01a0 	.word	0x3efa01a0
 8005748:	16c15177 	.word	0x16c15177
 800574c:	3f56c16c 	.word	0x3f56c16c
 8005750:	5555554c 	.word	0x5555554c
 8005754:	3fa55555 	.word	0x3fa55555
 8005758:	00000000 	.word	0x00000000
 800575c:	3ff00000 	.word	0x3ff00000
 8005760:	3fe00000 	.word	0x3fe00000
 8005764:	3fd33332 	.word	0x3fd33332
 8005768:	3ff00000 	.word	0x3ff00000
 800576c:	3fe90000 	.word	0x3fe90000
 8005770:	3fd20000 	.word	0x3fd20000
 8005774:	00000000 	.word	0x00000000

08005778 <__kernel_sin>:
 8005778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800577c:	ed2d 8b04 	vpush	{d8-d9}
 8005780:	eeb0 8a41 	vmov.f32	s16, s2
 8005784:	eef0 8a61 	vmov.f32	s17, s3
 8005788:	ec55 4b10 	vmov	r4, r5, d0
 800578c:	b083      	sub	sp, #12
 800578e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005792:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005796:	9001      	str	r0, [sp, #4]
 8005798:	da06      	bge.n	80057a8 <__kernel_sin+0x30>
 800579a:	ee10 0a10 	vmov	r0, s0
 800579e:	4629      	mov	r1, r5
 80057a0:	f7fb f984 	bl	8000aac <__aeabi_d2iz>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	d051      	beq.n	800584c <__kernel_sin+0xd4>
 80057a8:	4622      	mov	r2, r4
 80057aa:	462b      	mov	r3, r5
 80057ac:	4620      	mov	r0, r4
 80057ae:	4629      	mov	r1, r5
 80057b0:	f7fa fee2 	bl	8000578 <__aeabi_dmul>
 80057b4:	4682      	mov	sl, r0
 80057b6:	468b      	mov	fp, r1
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4620      	mov	r0, r4
 80057be:	4629      	mov	r1, r5
 80057c0:	f7fa feda 	bl	8000578 <__aeabi_dmul>
 80057c4:	a341      	add	r3, pc, #260	; (adr r3, 80058cc <__kernel_sin+0x154>)
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	4680      	mov	r8, r0
 80057cc:	4689      	mov	r9, r1
 80057ce:	4650      	mov	r0, sl
 80057d0:	4659      	mov	r1, fp
 80057d2:	f7fa fed1 	bl	8000578 <__aeabi_dmul>
 80057d6:	a33f      	add	r3, pc, #252	; (adr r3, 80058d4 <__kernel_sin+0x15c>)
 80057d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057dc:	f7fa fd14 	bl	8000208 <__aeabi_dsub>
 80057e0:	4652      	mov	r2, sl
 80057e2:	465b      	mov	r3, fp
 80057e4:	f7fa fec8 	bl	8000578 <__aeabi_dmul>
 80057e8:	a33c      	add	r3, pc, #240	; (adr r3, 80058dc <__kernel_sin+0x164>)
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	f7fa fd0d 	bl	800020c <__adddf3>
 80057f2:	4652      	mov	r2, sl
 80057f4:	465b      	mov	r3, fp
 80057f6:	f7fa febf 	bl	8000578 <__aeabi_dmul>
 80057fa:	a33a      	add	r3, pc, #232	; (adr r3, 80058e4 <__kernel_sin+0x16c>)
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	f7fa fd02 	bl	8000208 <__aeabi_dsub>
 8005804:	4652      	mov	r2, sl
 8005806:	465b      	mov	r3, fp
 8005808:	f7fa feb6 	bl	8000578 <__aeabi_dmul>
 800580c:	a337      	add	r3, pc, #220	; (adr r3, 80058ec <__kernel_sin+0x174>)
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	f7fa fcfb 	bl	800020c <__adddf3>
 8005816:	9b01      	ldr	r3, [sp, #4]
 8005818:	4606      	mov	r6, r0
 800581a:	460f      	mov	r7, r1
 800581c:	b9eb      	cbnz	r3, 800585a <__kernel_sin+0xe2>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	4650      	mov	r0, sl
 8005824:	4659      	mov	r1, fp
 8005826:	f7fa fea7 	bl	8000578 <__aeabi_dmul>
 800582a:	a325      	add	r3, pc, #148	; (adr r3, 80058c0 <__kernel_sin+0x148>)
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f7fa fcea 	bl	8000208 <__aeabi_dsub>
 8005834:	4642      	mov	r2, r8
 8005836:	464b      	mov	r3, r9
 8005838:	f7fa fe9e 	bl	8000578 <__aeabi_dmul>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4620      	mov	r0, r4
 8005842:	4629      	mov	r1, r5
 8005844:	f7fa fce2 	bl	800020c <__adddf3>
 8005848:	4604      	mov	r4, r0
 800584a:	460d      	mov	r5, r1
 800584c:	ec45 4b10 	vmov	d0, r4, r5
 8005850:	b003      	add	sp, #12
 8005852:	ecbd 8b04 	vpop	{d8-d9}
 8005856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800585a:	4b1b      	ldr	r3, [pc, #108]	; (80058c8 <__kernel_sin+0x150>)
 800585c:	ec51 0b18 	vmov	r0, r1, d8
 8005860:	2200      	movs	r2, #0
 8005862:	f7fa fe89 	bl	8000578 <__aeabi_dmul>
 8005866:	4632      	mov	r2, r6
 8005868:	ec41 0b19 	vmov	d9, r0, r1
 800586c:	463b      	mov	r3, r7
 800586e:	4640      	mov	r0, r8
 8005870:	4649      	mov	r1, r9
 8005872:	f7fa fe81 	bl	8000578 <__aeabi_dmul>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	ec51 0b19 	vmov	r0, r1, d9
 800587e:	f7fa fcc3 	bl	8000208 <__aeabi_dsub>
 8005882:	4652      	mov	r2, sl
 8005884:	465b      	mov	r3, fp
 8005886:	f7fa fe77 	bl	8000578 <__aeabi_dmul>
 800588a:	ec53 2b18 	vmov	r2, r3, d8
 800588e:	f7fa fcbb 	bl	8000208 <__aeabi_dsub>
 8005892:	a30b      	add	r3, pc, #44	; (adr r3, 80058c0 <__kernel_sin+0x148>)
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	4606      	mov	r6, r0
 800589a:	460f      	mov	r7, r1
 800589c:	4640      	mov	r0, r8
 800589e:	4649      	mov	r1, r9
 80058a0:	f7fa fe6a 	bl	8000578 <__aeabi_dmul>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4630      	mov	r0, r6
 80058aa:	4639      	mov	r1, r7
 80058ac:	f7fa fcae 	bl	800020c <__adddf3>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4620      	mov	r0, r4
 80058b6:	4629      	mov	r1, r5
 80058b8:	f7fa fca6 	bl	8000208 <__aeabi_dsub>
 80058bc:	e7c4      	b.n	8005848 <__kernel_sin+0xd0>
 80058be:	bf00      	nop
 80058c0:	55555549 	.word	0x55555549
 80058c4:	3fc55555 	.word	0x3fc55555
 80058c8:	3fe00000 	.word	0x3fe00000
 80058cc:	5acfd57c 	.word	0x5acfd57c
 80058d0:	3de5d93a 	.word	0x3de5d93a
 80058d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80058d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80058dc:	57b1fe7d 	.word	0x57b1fe7d
 80058e0:	3ec71de3 	.word	0x3ec71de3
 80058e4:	19c161d5 	.word	0x19c161d5
 80058e8:	3f2a01a0 	.word	0x3f2a01a0
 80058ec:	1110f8a6 	.word	0x1110f8a6
 80058f0:	3f811111 	.word	0x3f811111
 80058f4:	00000000 	.word	0x00000000

080058f8 <__ieee754_rem_pio2>:
 80058f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058fc:	ed2d 8b02 	vpush	{d8}
 8005900:	ec55 4b10 	vmov	r4, r5, d0
 8005904:	4bca      	ldr	r3, [pc, #808]	; (8005c30 <__ieee754_rem_pio2+0x338>)
 8005906:	b08b      	sub	sp, #44	; 0x2c
 8005908:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800590c:	4598      	cmp	r8, r3
 800590e:	4682      	mov	sl, r0
 8005910:	9502      	str	r5, [sp, #8]
 8005912:	dc08      	bgt.n	8005926 <__ieee754_rem_pio2+0x2e>
 8005914:	2200      	movs	r2, #0
 8005916:	2300      	movs	r3, #0
 8005918:	ed80 0b00 	vstr	d0, [r0]
 800591c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005920:	f04f 0b00 	mov.w	fp, #0
 8005924:	e028      	b.n	8005978 <__ieee754_rem_pio2+0x80>
 8005926:	4bc3      	ldr	r3, [pc, #780]	; (8005c34 <__ieee754_rem_pio2+0x33c>)
 8005928:	4598      	cmp	r8, r3
 800592a:	dc78      	bgt.n	8005a1e <__ieee754_rem_pio2+0x126>
 800592c:	9b02      	ldr	r3, [sp, #8]
 800592e:	4ec2      	ldr	r6, [pc, #776]	; (8005c38 <__ieee754_rem_pio2+0x340>)
 8005930:	2b00      	cmp	r3, #0
 8005932:	ee10 0a10 	vmov	r0, s0
 8005936:	a3b0      	add	r3, pc, #704	; (adr r3, 8005bf8 <__ieee754_rem_pio2+0x300>)
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	4629      	mov	r1, r5
 800593e:	dd39      	ble.n	80059b4 <__ieee754_rem_pio2+0xbc>
 8005940:	f7fa fc62 	bl	8000208 <__aeabi_dsub>
 8005944:	45b0      	cmp	r8, r6
 8005946:	4604      	mov	r4, r0
 8005948:	460d      	mov	r5, r1
 800594a:	d01b      	beq.n	8005984 <__ieee754_rem_pio2+0x8c>
 800594c:	a3ac      	add	r3, pc, #688	; (adr r3, 8005c00 <__ieee754_rem_pio2+0x308>)
 800594e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005952:	f7fa fc59 	bl	8000208 <__aeabi_dsub>
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	e9ca 2300 	strd	r2, r3, [sl]
 800595e:	4620      	mov	r0, r4
 8005960:	4629      	mov	r1, r5
 8005962:	f7fa fc51 	bl	8000208 <__aeabi_dsub>
 8005966:	a3a6      	add	r3, pc, #664	; (adr r3, 8005c00 <__ieee754_rem_pio2+0x308>)
 8005968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596c:	f7fa fc4c 	bl	8000208 <__aeabi_dsub>
 8005970:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005974:	f04f 0b01 	mov.w	fp, #1
 8005978:	4658      	mov	r0, fp
 800597a:	b00b      	add	sp, #44	; 0x2c
 800597c:	ecbd 8b02 	vpop	{d8}
 8005980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005984:	a3a0      	add	r3, pc, #640	; (adr r3, 8005c08 <__ieee754_rem_pio2+0x310>)
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	f7fa fc3d 	bl	8000208 <__aeabi_dsub>
 800598e:	a3a0      	add	r3, pc, #640	; (adr r3, 8005c10 <__ieee754_rem_pio2+0x318>)
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	4604      	mov	r4, r0
 8005996:	460d      	mov	r5, r1
 8005998:	f7fa fc36 	bl	8000208 <__aeabi_dsub>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	e9ca 2300 	strd	r2, r3, [sl]
 80059a4:	4620      	mov	r0, r4
 80059a6:	4629      	mov	r1, r5
 80059a8:	f7fa fc2e 	bl	8000208 <__aeabi_dsub>
 80059ac:	a398      	add	r3, pc, #608	; (adr r3, 8005c10 <__ieee754_rem_pio2+0x318>)
 80059ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b2:	e7db      	b.n	800596c <__ieee754_rem_pio2+0x74>
 80059b4:	f7fa fc2a 	bl	800020c <__adddf3>
 80059b8:	45b0      	cmp	r8, r6
 80059ba:	4604      	mov	r4, r0
 80059bc:	460d      	mov	r5, r1
 80059be:	d016      	beq.n	80059ee <__ieee754_rem_pio2+0xf6>
 80059c0:	a38f      	add	r3, pc, #572	; (adr r3, 8005c00 <__ieee754_rem_pio2+0x308>)
 80059c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c6:	f7fa fc21 	bl	800020c <__adddf3>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	e9ca 2300 	strd	r2, r3, [sl]
 80059d2:	4620      	mov	r0, r4
 80059d4:	4629      	mov	r1, r5
 80059d6:	f7fa fc17 	bl	8000208 <__aeabi_dsub>
 80059da:	a389      	add	r3, pc, #548	; (adr r3, 8005c00 <__ieee754_rem_pio2+0x308>)
 80059dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e0:	f7fa fc14 	bl	800020c <__adddf3>
 80059e4:	f04f 3bff 	mov.w	fp, #4294967295
 80059e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80059ec:	e7c4      	b.n	8005978 <__ieee754_rem_pio2+0x80>
 80059ee:	a386      	add	r3, pc, #536	; (adr r3, 8005c08 <__ieee754_rem_pio2+0x310>)
 80059f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f4:	f7fa fc0a 	bl	800020c <__adddf3>
 80059f8:	a385      	add	r3, pc, #532	; (adr r3, 8005c10 <__ieee754_rem_pio2+0x318>)
 80059fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fe:	4604      	mov	r4, r0
 8005a00:	460d      	mov	r5, r1
 8005a02:	f7fa fc03 	bl	800020c <__adddf3>
 8005a06:	4602      	mov	r2, r0
 8005a08:	460b      	mov	r3, r1
 8005a0a:	e9ca 2300 	strd	r2, r3, [sl]
 8005a0e:	4620      	mov	r0, r4
 8005a10:	4629      	mov	r1, r5
 8005a12:	f7fa fbf9 	bl	8000208 <__aeabi_dsub>
 8005a16:	a37e      	add	r3, pc, #504	; (adr r3, 8005c10 <__ieee754_rem_pio2+0x318>)
 8005a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1c:	e7e0      	b.n	80059e0 <__ieee754_rem_pio2+0xe8>
 8005a1e:	4b87      	ldr	r3, [pc, #540]	; (8005c3c <__ieee754_rem_pio2+0x344>)
 8005a20:	4598      	cmp	r8, r3
 8005a22:	f300 80d8 	bgt.w	8005bd6 <__ieee754_rem_pio2+0x2de>
 8005a26:	f000 f96d 	bl	8005d04 <fabs>
 8005a2a:	ec55 4b10 	vmov	r4, r5, d0
 8005a2e:	ee10 0a10 	vmov	r0, s0
 8005a32:	a379      	add	r3, pc, #484	; (adr r3, 8005c18 <__ieee754_rem_pio2+0x320>)
 8005a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a38:	4629      	mov	r1, r5
 8005a3a:	f7fa fd9d 	bl	8000578 <__aeabi_dmul>
 8005a3e:	4b80      	ldr	r3, [pc, #512]	; (8005c40 <__ieee754_rem_pio2+0x348>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	f7fa fbe3 	bl	800020c <__adddf3>
 8005a46:	f7fb f831 	bl	8000aac <__aeabi_d2iz>
 8005a4a:	4683      	mov	fp, r0
 8005a4c:	f7fa fd2a 	bl	80004a4 <__aeabi_i2d>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	ec43 2b18 	vmov	d8, r2, r3
 8005a58:	a367      	add	r3, pc, #412	; (adr r3, 8005bf8 <__ieee754_rem_pio2+0x300>)
 8005a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5e:	f7fa fd8b 	bl	8000578 <__aeabi_dmul>
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	4620      	mov	r0, r4
 8005a68:	4629      	mov	r1, r5
 8005a6a:	f7fa fbcd 	bl	8000208 <__aeabi_dsub>
 8005a6e:	a364      	add	r3, pc, #400	; (adr r3, 8005c00 <__ieee754_rem_pio2+0x308>)
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	4606      	mov	r6, r0
 8005a76:	460f      	mov	r7, r1
 8005a78:	ec51 0b18 	vmov	r0, r1, d8
 8005a7c:	f7fa fd7c 	bl	8000578 <__aeabi_dmul>
 8005a80:	f1bb 0f1f 	cmp.w	fp, #31
 8005a84:	4604      	mov	r4, r0
 8005a86:	460d      	mov	r5, r1
 8005a88:	dc0d      	bgt.n	8005aa6 <__ieee754_rem_pio2+0x1ae>
 8005a8a:	4b6e      	ldr	r3, [pc, #440]	; (8005c44 <__ieee754_rem_pio2+0x34c>)
 8005a8c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a94:	4543      	cmp	r3, r8
 8005a96:	d006      	beq.n	8005aa6 <__ieee754_rem_pio2+0x1ae>
 8005a98:	4622      	mov	r2, r4
 8005a9a:	462b      	mov	r3, r5
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	4639      	mov	r1, r7
 8005aa0:	f7fa fbb2 	bl	8000208 <__aeabi_dsub>
 8005aa4:	e00e      	b.n	8005ac4 <__ieee754_rem_pio2+0x1cc>
 8005aa6:	462b      	mov	r3, r5
 8005aa8:	4622      	mov	r2, r4
 8005aaa:	4630      	mov	r0, r6
 8005aac:	4639      	mov	r1, r7
 8005aae:	f7fa fbab 	bl	8000208 <__aeabi_dsub>
 8005ab2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005ab6:	9303      	str	r3, [sp, #12]
 8005ab8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005abc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005ac0:	2b10      	cmp	r3, #16
 8005ac2:	dc02      	bgt.n	8005aca <__ieee754_rem_pio2+0x1d2>
 8005ac4:	e9ca 0100 	strd	r0, r1, [sl]
 8005ac8:	e039      	b.n	8005b3e <__ieee754_rem_pio2+0x246>
 8005aca:	a34f      	add	r3, pc, #316	; (adr r3, 8005c08 <__ieee754_rem_pio2+0x310>)
 8005acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad0:	ec51 0b18 	vmov	r0, r1, d8
 8005ad4:	f7fa fd50 	bl	8000578 <__aeabi_dmul>
 8005ad8:	4604      	mov	r4, r0
 8005ada:	460d      	mov	r5, r1
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4630      	mov	r0, r6
 8005ae2:	4639      	mov	r1, r7
 8005ae4:	f7fa fb90 	bl	8000208 <__aeabi_dsub>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4680      	mov	r8, r0
 8005aee:	4689      	mov	r9, r1
 8005af0:	4630      	mov	r0, r6
 8005af2:	4639      	mov	r1, r7
 8005af4:	f7fa fb88 	bl	8000208 <__aeabi_dsub>
 8005af8:	4622      	mov	r2, r4
 8005afa:	462b      	mov	r3, r5
 8005afc:	f7fa fb84 	bl	8000208 <__aeabi_dsub>
 8005b00:	a343      	add	r3, pc, #268	; (adr r3, 8005c10 <__ieee754_rem_pio2+0x318>)
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	4604      	mov	r4, r0
 8005b08:	460d      	mov	r5, r1
 8005b0a:	ec51 0b18 	vmov	r0, r1, d8
 8005b0e:	f7fa fd33 	bl	8000578 <__aeabi_dmul>
 8005b12:	4622      	mov	r2, r4
 8005b14:	462b      	mov	r3, r5
 8005b16:	f7fa fb77 	bl	8000208 <__aeabi_dsub>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	4604      	mov	r4, r0
 8005b20:	460d      	mov	r5, r1
 8005b22:	4640      	mov	r0, r8
 8005b24:	4649      	mov	r1, r9
 8005b26:	f7fa fb6f 	bl	8000208 <__aeabi_dsub>
 8005b2a:	9a03      	ldr	r2, [sp, #12]
 8005b2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b31      	cmp	r3, #49	; 0x31
 8005b34:	dc24      	bgt.n	8005b80 <__ieee754_rem_pio2+0x288>
 8005b36:	e9ca 0100 	strd	r0, r1, [sl]
 8005b3a:	4646      	mov	r6, r8
 8005b3c:	464f      	mov	r7, r9
 8005b3e:	e9da 8900 	ldrd	r8, r9, [sl]
 8005b42:	4630      	mov	r0, r6
 8005b44:	4642      	mov	r2, r8
 8005b46:	464b      	mov	r3, r9
 8005b48:	4639      	mov	r1, r7
 8005b4a:	f7fa fb5d 	bl	8000208 <__aeabi_dsub>
 8005b4e:	462b      	mov	r3, r5
 8005b50:	4622      	mov	r2, r4
 8005b52:	f7fa fb59 	bl	8000208 <__aeabi_dsub>
 8005b56:	9b02      	ldr	r3, [sp, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005b5e:	f6bf af0b 	bge.w	8005978 <__ieee754_rem_pio2+0x80>
 8005b62:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005b66:	f8ca 3004 	str.w	r3, [sl, #4]
 8005b6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b6e:	f8ca 8000 	str.w	r8, [sl]
 8005b72:	f8ca 0008 	str.w	r0, [sl, #8]
 8005b76:	f8ca 300c 	str.w	r3, [sl, #12]
 8005b7a:	f1cb 0b00 	rsb	fp, fp, #0
 8005b7e:	e6fb      	b.n	8005978 <__ieee754_rem_pio2+0x80>
 8005b80:	a327      	add	r3, pc, #156	; (adr r3, 8005c20 <__ieee754_rem_pio2+0x328>)
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	ec51 0b18 	vmov	r0, r1, d8
 8005b8a:	f7fa fcf5 	bl	8000578 <__aeabi_dmul>
 8005b8e:	4604      	mov	r4, r0
 8005b90:	460d      	mov	r5, r1
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	4640      	mov	r0, r8
 8005b98:	4649      	mov	r1, r9
 8005b9a:	f7fa fb35 	bl	8000208 <__aeabi_dsub>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	460f      	mov	r7, r1
 8005ba6:	4640      	mov	r0, r8
 8005ba8:	4649      	mov	r1, r9
 8005baa:	f7fa fb2d 	bl	8000208 <__aeabi_dsub>
 8005bae:	4622      	mov	r2, r4
 8005bb0:	462b      	mov	r3, r5
 8005bb2:	f7fa fb29 	bl	8000208 <__aeabi_dsub>
 8005bb6:	a31c      	add	r3, pc, #112	; (adr r3, 8005c28 <__ieee754_rem_pio2+0x330>)
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	460d      	mov	r5, r1
 8005bc0:	ec51 0b18 	vmov	r0, r1, d8
 8005bc4:	f7fa fcd8 	bl	8000578 <__aeabi_dmul>
 8005bc8:	4622      	mov	r2, r4
 8005bca:	462b      	mov	r3, r5
 8005bcc:	f7fa fb1c 	bl	8000208 <__aeabi_dsub>
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	460d      	mov	r5, r1
 8005bd4:	e760      	b.n	8005a98 <__ieee754_rem_pio2+0x1a0>
 8005bd6:	4b1c      	ldr	r3, [pc, #112]	; (8005c48 <__ieee754_rem_pio2+0x350>)
 8005bd8:	4598      	cmp	r8, r3
 8005bda:	dd37      	ble.n	8005c4c <__ieee754_rem_pio2+0x354>
 8005bdc:	ee10 2a10 	vmov	r2, s0
 8005be0:	462b      	mov	r3, r5
 8005be2:	4620      	mov	r0, r4
 8005be4:	4629      	mov	r1, r5
 8005be6:	f7fa fb0f 	bl	8000208 <__aeabi_dsub>
 8005bea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005bee:	e9ca 0100 	strd	r0, r1, [sl]
 8005bf2:	e695      	b.n	8005920 <__ieee754_rem_pio2+0x28>
 8005bf4:	f3af 8000 	nop.w
 8005bf8:	54400000 	.word	0x54400000
 8005bfc:	3ff921fb 	.word	0x3ff921fb
 8005c00:	1a626331 	.word	0x1a626331
 8005c04:	3dd0b461 	.word	0x3dd0b461
 8005c08:	1a600000 	.word	0x1a600000
 8005c0c:	3dd0b461 	.word	0x3dd0b461
 8005c10:	2e037073 	.word	0x2e037073
 8005c14:	3ba3198a 	.word	0x3ba3198a
 8005c18:	6dc9c883 	.word	0x6dc9c883
 8005c1c:	3fe45f30 	.word	0x3fe45f30
 8005c20:	2e000000 	.word	0x2e000000
 8005c24:	3ba3198a 	.word	0x3ba3198a
 8005c28:	252049c1 	.word	0x252049c1
 8005c2c:	397b839a 	.word	0x397b839a
 8005c30:	3fe921fb 	.word	0x3fe921fb
 8005c34:	4002d97b 	.word	0x4002d97b
 8005c38:	3ff921fb 	.word	0x3ff921fb
 8005c3c:	413921fb 	.word	0x413921fb
 8005c40:	3fe00000 	.word	0x3fe00000
 8005c44:	08006610 	.word	0x08006610
 8005c48:	7fefffff 	.word	0x7fefffff
 8005c4c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8005c50:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8005c54:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8005c58:	4620      	mov	r0, r4
 8005c5a:	460d      	mov	r5, r1
 8005c5c:	f7fa ff26 	bl	8000aac <__aeabi_d2iz>
 8005c60:	f7fa fc20 	bl	80004a4 <__aeabi_i2d>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	4620      	mov	r0, r4
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c70:	f7fa faca 	bl	8000208 <__aeabi_dsub>
 8005c74:	4b21      	ldr	r3, [pc, #132]	; (8005cfc <__ieee754_rem_pio2+0x404>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	f7fa fc7e 	bl	8000578 <__aeabi_dmul>
 8005c7c:	460d      	mov	r5, r1
 8005c7e:	4604      	mov	r4, r0
 8005c80:	f7fa ff14 	bl	8000aac <__aeabi_d2iz>
 8005c84:	f7fa fc0e 	bl	80004a4 <__aeabi_i2d>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	4629      	mov	r1, r5
 8005c90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005c94:	f7fa fab8 	bl	8000208 <__aeabi_dsub>
 8005c98:	4b18      	ldr	r3, [pc, #96]	; (8005cfc <__ieee754_rem_pio2+0x404>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f7fa fc6c 	bl	8000578 <__aeabi_dmul>
 8005ca0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005ca4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8005ca8:	2703      	movs	r7, #3
 8005caa:	2400      	movs	r4, #0
 8005cac:	2500      	movs	r5, #0
 8005cae:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8005cb2:	4622      	mov	r2, r4
 8005cb4:	462b      	mov	r3, r5
 8005cb6:	46b9      	mov	r9, r7
 8005cb8:	3f01      	subs	r7, #1
 8005cba:	f7fa fec5 	bl	8000a48 <__aeabi_dcmpeq>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d1f5      	bne.n	8005cae <__ieee754_rem_pio2+0x3b6>
 8005cc2:	4b0f      	ldr	r3, [pc, #60]	; (8005d00 <__ieee754_rem_pio2+0x408>)
 8005cc4:	9301      	str	r3, [sp, #4]
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	4632      	mov	r2, r6
 8005ccc:	464b      	mov	r3, r9
 8005cce:	4651      	mov	r1, sl
 8005cd0:	a804      	add	r0, sp, #16
 8005cd2:	f000 f821 	bl	8005d18 <__kernel_rem_pio2>
 8005cd6:	9b02      	ldr	r3, [sp, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	4683      	mov	fp, r0
 8005cdc:	f6bf ae4c 	bge.w	8005978 <__ieee754_rem_pio2+0x80>
 8005ce0:	e9da 2100 	ldrd	r2, r1, [sl]
 8005ce4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ce8:	e9ca 2300 	strd	r2, r3, [sl]
 8005cec:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005cf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cf4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005cf8:	e73f      	b.n	8005b7a <__ieee754_rem_pio2+0x282>
 8005cfa:	bf00      	nop
 8005cfc:	41700000 	.word	0x41700000
 8005d00:	08006690 	.word	0x08006690

08005d04 <fabs>:
 8005d04:	ec51 0b10 	vmov	r0, r1, d0
 8005d08:	ee10 2a10 	vmov	r2, s0
 8005d0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005d10:	ec43 2b10 	vmov	d0, r2, r3
 8005d14:	4770      	bx	lr
	...

08005d18 <__kernel_rem_pio2>:
 8005d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d1c:	ed2d 8b02 	vpush	{d8}
 8005d20:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005d24:	f112 0f14 	cmn.w	r2, #20
 8005d28:	9306      	str	r3, [sp, #24]
 8005d2a:	9104      	str	r1, [sp, #16]
 8005d2c:	4bc2      	ldr	r3, [pc, #776]	; (8006038 <__kernel_rem_pio2+0x320>)
 8005d2e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005d30:	9009      	str	r0, [sp, #36]	; 0x24
 8005d32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	9b06      	ldr	r3, [sp, #24]
 8005d3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d3e:	bfa8      	it	ge
 8005d40:	1ed4      	subge	r4, r2, #3
 8005d42:	9305      	str	r3, [sp, #20]
 8005d44:	bfb2      	itee	lt
 8005d46:	2400      	movlt	r4, #0
 8005d48:	2318      	movge	r3, #24
 8005d4a:	fb94 f4f3 	sdivge	r4, r4, r3
 8005d4e:	f06f 0317 	mvn.w	r3, #23
 8005d52:	fb04 3303 	mla	r3, r4, r3, r3
 8005d56:	eb03 0a02 	add.w	sl, r3, r2
 8005d5a:	9b00      	ldr	r3, [sp, #0]
 8005d5c:	9a05      	ldr	r2, [sp, #20]
 8005d5e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8006028 <__kernel_rem_pio2+0x310>
 8005d62:	eb03 0802 	add.w	r8, r3, r2
 8005d66:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005d68:	1aa7      	subs	r7, r4, r2
 8005d6a:	ae20      	add	r6, sp, #128	; 0x80
 8005d6c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005d70:	2500      	movs	r5, #0
 8005d72:	4545      	cmp	r5, r8
 8005d74:	dd13      	ble.n	8005d9e <__kernel_rem_pio2+0x86>
 8005d76:	9b06      	ldr	r3, [sp, #24]
 8005d78:	aa20      	add	r2, sp, #128	; 0x80
 8005d7a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005d7e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005d82:	f04f 0800 	mov.w	r8, #0
 8005d86:	9b00      	ldr	r3, [sp, #0]
 8005d88:	4598      	cmp	r8, r3
 8005d8a:	dc31      	bgt.n	8005df0 <__kernel_rem_pio2+0xd8>
 8005d8c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8006028 <__kernel_rem_pio2+0x310>
 8005d90:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005d94:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005d98:	462f      	mov	r7, r5
 8005d9a:	2600      	movs	r6, #0
 8005d9c:	e01b      	b.n	8005dd6 <__kernel_rem_pio2+0xbe>
 8005d9e:	42ef      	cmn	r7, r5
 8005da0:	d407      	bmi.n	8005db2 <__kernel_rem_pio2+0x9a>
 8005da2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005da6:	f7fa fb7d 	bl	80004a4 <__aeabi_i2d>
 8005daa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005dae:	3501      	adds	r5, #1
 8005db0:	e7df      	b.n	8005d72 <__kernel_rem_pio2+0x5a>
 8005db2:	ec51 0b18 	vmov	r0, r1, d8
 8005db6:	e7f8      	b.n	8005daa <__kernel_rem_pio2+0x92>
 8005db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dbc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005dc0:	f7fa fbda 	bl	8000578 <__aeabi_dmul>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dcc:	f7fa fa1e 	bl	800020c <__adddf3>
 8005dd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dd4:	3601      	adds	r6, #1
 8005dd6:	9b05      	ldr	r3, [sp, #20]
 8005dd8:	429e      	cmp	r6, r3
 8005dda:	f1a7 0708 	sub.w	r7, r7, #8
 8005dde:	ddeb      	ble.n	8005db8 <__kernel_rem_pio2+0xa0>
 8005de0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005de4:	f108 0801 	add.w	r8, r8, #1
 8005de8:	ecab 7b02 	vstmia	fp!, {d7}
 8005dec:	3508      	adds	r5, #8
 8005dee:	e7ca      	b.n	8005d86 <__kernel_rem_pio2+0x6e>
 8005df0:	9b00      	ldr	r3, [sp, #0]
 8005df2:	aa0c      	add	r2, sp, #48	; 0x30
 8005df4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005df8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dfa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005dfc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005e00:	9c00      	ldr	r4, [sp, #0]
 8005e02:	930a      	str	r3, [sp, #40]	; 0x28
 8005e04:	00e3      	lsls	r3, r4, #3
 8005e06:	9308      	str	r3, [sp, #32]
 8005e08:	ab98      	add	r3, sp, #608	; 0x260
 8005e0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e0e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005e12:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8005e16:	ab70      	add	r3, sp, #448	; 0x1c0
 8005e18:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8005e1c:	46c3      	mov	fp, r8
 8005e1e:	46a1      	mov	r9, r4
 8005e20:	f1b9 0f00 	cmp.w	r9, #0
 8005e24:	f1a5 0508 	sub.w	r5, r5, #8
 8005e28:	dc77      	bgt.n	8005f1a <__kernel_rem_pio2+0x202>
 8005e2a:	ec47 6b10 	vmov	d0, r6, r7
 8005e2e:	4650      	mov	r0, sl
 8005e30:	f000 fac2 	bl	80063b8 <scalbn>
 8005e34:	ec57 6b10 	vmov	r6, r7, d0
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005e3e:	ee10 0a10 	vmov	r0, s0
 8005e42:	4639      	mov	r1, r7
 8005e44:	f7fa fb98 	bl	8000578 <__aeabi_dmul>
 8005e48:	ec41 0b10 	vmov	d0, r0, r1
 8005e4c:	f000 fb34 	bl	80064b8 <floor>
 8005e50:	4b7a      	ldr	r3, [pc, #488]	; (800603c <__kernel_rem_pio2+0x324>)
 8005e52:	ec51 0b10 	vmov	r0, r1, d0
 8005e56:	2200      	movs	r2, #0
 8005e58:	f7fa fb8e 	bl	8000578 <__aeabi_dmul>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4630      	mov	r0, r6
 8005e62:	4639      	mov	r1, r7
 8005e64:	f7fa f9d0 	bl	8000208 <__aeabi_dsub>
 8005e68:	460f      	mov	r7, r1
 8005e6a:	4606      	mov	r6, r0
 8005e6c:	f7fa fe1e 	bl	8000aac <__aeabi_d2iz>
 8005e70:	9002      	str	r0, [sp, #8]
 8005e72:	f7fa fb17 	bl	80004a4 <__aeabi_i2d>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	4639      	mov	r1, r7
 8005e7e:	f7fa f9c3 	bl	8000208 <__aeabi_dsub>
 8005e82:	f1ba 0f00 	cmp.w	sl, #0
 8005e86:	4606      	mov	r6, r0
 8005e88:	460f      	mov	r7, r1
 8005e8a:	dd6d      	ble.n	8005f68 <__kernel_rem_pio2+0x250>
 8005e8c:	1e61      	subs	r1, r4, #1
 8005e8e:	ab0c      	add	r3, sp, #48	; 0x30
 8005e90:	9d02      	ldr	r5, [sp, #8]
 8005e92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005e96:	f1ca 0018 	rsb	r0, sl, #24
 8005e9a:	fa43 f200 	asr.w	r2, r3, r0
 8005e9e:	4415      	add	r5, r2
 8005ea0:	4082      	lsls	r2, r0
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	aa0c      	add	r2, sp, #48	; 0x30
 8005ea6:	9502      	str	r5, [sp, #8]
 8005ea8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005eac:	f1ca 0217 	rsb	r2, sl, #23
 8005eb0:	fa43 fb02 	asr.w	fp, r3, r2
 8005eb4:	f1bb 0f00 	cmp.w	fp, #0
 8005eb8:	dd65      	ble.n	8005f86 <__kernel_rem_pio2+0x26e>
 8005eba:	9b02      	ldr	r3, [sp, #8]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	9302      	str	r3, [sp, #8]
 8005ec2:	4615      	mov	r5, r2
 8005ec4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005ec8:	4294      	cmp	r4, r2
 8005eca:	f300 809f 	bgt.w	800600c <__kernel_rem_pio2+0x2f4>
 8005ece:	f1ba 0f00 	cmp.w	sl, #0
 8005ed2:	dd07      	ble.n	8005ee4 <__kernel_rem_pio2+0x1cc>
 8005ed4:	f1ba 0f01 	cmp.w	sl, #1
 8005ed8:	f000 80c1 	beq.w	800605e <__kernel_rem_pio2+0x346>
 8005edc:	f1ba 0f02 	cmp.w	sl, #2
 8005ee0:	f000 80c7 	beq.w	8006072 <__kernel_rem_pio2+0x35a>
 8005ee4:	f1bb 0f02 	cmp.w	fp, #2
 8005ee8:	d14d      	bne.n	8005f86 <__kernel_rem_pio2+0x26e>
 8005eea:	4632      	mov	r2, r6
 8005eec:	463b      	mov	r3, r7
 8005eee:	4954      	ldr	r1, [pc, #336]	; (8006040 <__kernel_rem_pio2+0x328>)
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	f7fa f989 	bl	8000208 <__aeabi_dsub>
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	460f      	mov	r7, r1
 8005efa:	2d00      	cmp	r5, #0
 8005efc:	d043      	beq.n	8005f86 <__kernel_rem_pio2+0x26e>
 8005efe:	4650      	mov	r0, sl
 8005f00:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8006030 <__kernel_rem_pio2+0x318>
 8005f04:	f000 fa58 	bl	80063b8 <scalbn>
 8005f08:	4630      	mov	r0, r6
 8005f0a:	4639      	mov	r1, r7
 8005f0c:	ec53 2b10 	vmov	r2, r3, d0
 8005f10:	f7fa f97a 	bl	8000208 <__aeabi_dsub>
 8005f14:	4606      	mov	r6, r0
 8005f16:	460f      	mov	r7, r1
 8005f18:	e035      	b.n	8005f86 <__kernel_rem_pio2+0x26e>
 8005f1a:	4b4a      	ldr	r3, [pc, #296]	; (8006044 <__kernel_rem_pio2+0x32c>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	4630      	mov	r0, r6
 8005f20:	4639      	mov	r1, r7
 8005f22:	f7fa fb29 	bl	8000578 <__aeabi_dmul>
 8005f26:	f7fa fdc1 	bl	8000aac <__aeabi_d2iz>
 8005f2a:	f7fa fabb 	bl	80004a4 <__aeabi_i2d>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	ec43 2b18 	vmov	d8, r2, r3
 8005f36:	4b44      	ldr	r3, [pc, #272]	; (8006048 <__kernel_rem_pio2+0x330>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f7fa fb1d 	bl	8000578 <__aeabi_dmul>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	4630      	mov	r0, r6
 8005f44:	4639      	mov	r1, r7
 8005f46:	f7fa f95f 	bl	8000208 <__aeabi_dsub>
 8005f4a:	f7fa fdaf 	bl	8000aac <__aeabi_d2iz>
 8005f4e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f52:	f84b 0b04 	str.w	r0, [fp], #4
 8005f56:	ec51 0b18 	vmov	r0, r1, d8
 8005f5a:	f7fa f957 	bl	800020c <__adddf3>
 8005f5e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005f62:	4606      	mov	r6, r0
 8005f64:	460f      	mov	r7, r1
 8005f66:	e75b      	b.n	8005e20 <__kernel_rem_pio2+0x108>
 8005f68:	d106      	bne.n	8005f78 <__kernel_rem_pio2+0x260>
 8005f6a:	1e63      	subs	r3, r4, #1
 8005f6c:	aa0c      	add	r2, sp, #48	; 0x30
 8005f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f72:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8005f76:	e79d      	b.n	8005eb4 <__kernel_rem_pio2+0x19c>
 8005f78:	4b34      	ldr	r3, [pc, #208]	; (800604c <__kernel_rem_pio2+0x334>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f7fa fd82 	bl	8000a84 <__aeabi_dcmpge>
 8005f80:	2800      	cmp	r0, #0
 8005f82:	d140      	bne.n	8006006 <__kernel_rem_pio2+0x2ee>
 8005f84:	4683      	mov	fp, r0
 8005f86:	2200      	movs	r2, #0
 8005f88:	2300      	movs	r3, #0
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	4639      	mov	r1, r7
 8005f8e:	f7fa fd5b 	bl	8000a48 <__aeabi_dcmpeq>
 8005f92:	2800      	cmp	r0, #0
 8005f94:	f000 80c1 	beq.w	800611a <__kernel_rem_pio2+0x402>
 8005f98:	1e65      	subs	r5, r4, #1
 8005f9a:	462b      	mov	r3, r5
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	9900      	ldr	r1, [sp, #0]
 8005fa0:	428b      	cmp	r3, r1
 8005fa2:	da6d      	bge.n	8006080 <__kernel_rem_pio2+0x368>
 8005fa4:	2a00      	cmp	r2, #0
 8005fa6:	f000 808a 	beq.w	80060be <__kernel_rem_pio2+0x3a6>
 8005faa:	ab0c      	add	r3, sp, #48	; 0x30
 8005fac:	f1aa 0a18 	sub.w	sl, sl, #24
 8005fb0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 80ae 	beq.w	8006116 <__kernel_rem_pio2+0x3fe>
 8005fba:	4650      	mov	r0, sl
 8005fbc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006030 <__kernel_rem_pio2+0x318>
 8005fc0:	f000 f9fa 	bl	80063b8 <scalbn>
 8005fc4:	1c6b      	adds	r3, r5, #1
 8005fc6:	00da      	lsls	r2, r3, #3
 8005fc8:	9205      	str	r2, [sp, #20]
 8005fca:	ec57 6b10 	vmov	r6, r7, d0
 8005fce:	aa70      	add	r2, sp, #448	; 0x1c0
 8005fd0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8006044 <__kernel_rem_pio2+0x32c>
 8005fd4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8005fd8:	462c      	mov	r4, r5
 8005fda:	f04f 0800 	mov.w	r8, #0
 8005fde:	2c00      	cmp	r4, #0
 8005fe0:	f280 80d4 	bge.w	800618c <__kernel_rem_pio2+0x474>
 8005fe4:	462c      	mov	r4, r5
 8005fe6:	2c00      	cmp	r4, #0
 8005fe8:	f2c0 8102 	blt.w	80061f0 <__kernel_rem_pio2+0x4d8>
 8005fec:	4b18      	ldr	r3, [pc, #96]	; (8006050 <__kernel_rem_pio2+0x338>)
 8005fee:	461e      	mov	r6, r3
 8005ff0:	ab70      	add	r3, sp, #448	; 0x1c0
 8005ff2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8005ff6:	1b2b      	subs	r3, r5, r4
 8005ff8:	f04f 0900 	mov.w	r9, #0
 8005ffc:	f04f 0a00 	mov.w	sl, #0
 8006000:	2700      	movs	r7, #0
 8006002:	9306      	str	r3, [sp, #24]
 8006004:	e0e6      	b.n	80061d4 <__kernel_rem_pio2+0x4bc>
 8006006:	f04f 0b02 	mov.w	fp, #2
 800600a:	e756      	b.n	8005eba <__kernel_rem_pio2+0x1a2>
 800600c:	f8d8 3000 	ldr.w	r3, [r8]
 8006010:	bb05      	cbnz	r5, 8006054 <__kernel_rem_pio2+0x33c>
 8006012:	b123      	cbz	r3, 800601e <__kernel_rem_pio2+0x306>
 8006014:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006018:	f8c8 3000 	str.w	r3, [r8]
 800601c:	2301      	movs	r3, #1
 800601e:	3201      	adds	r2, #1
 8006020:	f108 0804 	add.w	r8, r8, #4
 8006024:	461d      	mov	r5, r3
 8006026:	e74f      	b.n	8005ec8 <__kernel_rem_pio2+0x1b0>
	...
 8006034:	3ff00000 	.word	0x3ff00000
 8006038:	080067d8 	.word	0x080067d8
 800603c:	40200000 	.word	0x40200000
 8006040:	3ff00000 	.word	0x3ff00000
 8006044:	3e700000 	.word	0x3e700000
 8006048:	41700000 	.word	0x41700000
 800604c:	3fe00000 	.word	0x3fe00000
 8006050:	08006798 	.word	0x08006798
 8006054:	1acb      	subs	r3, r1, r3
 8006056:	f8c8 3000 	str.w	r3, [r8]
 800605a:	462b      	mov	r3, r5
 800605c:	e7df      	b.n	800601e <__kernel_rem_pio2+0x306>
 800605e:	1e62      	subs	r2, r4, #1
 8006060:	ab0c      	add	r3, sp, #48	; 0x30
 8006062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006066:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800606a:	a90c      	add	r1, sp, #48	; 0x30
 800606c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006070:	e738      	b.n	8005ee4 <__kernel_rem_pio2+0x1cc>
 8006072:	1e62      	subs	r2, r4, #1
 8006074:	ab0c      	add	r3, sp, #48	; 0x30
 8006076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800607a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800607e:	e7f4      	b.n	800606a <__kernel_rem_pio2+0x352>
 8006080:	a90c      	add	r1, sp, #48	; 0x30
 8006082:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006086:	3b01      	subs	r3, #1
 8006088:	430a      	orrs	r2, r1
 800608a:	e788      	b.n	8005f9e <__kernel_rem_pio2+0x286>
 800608c:	3301      	adds	r3, #1
 800608e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006092:	2900      	cmp	r1, #0
 8006094:	d0fa      	beq.n	800608c <__kernel_rem_pio2+0x374>
 8006096:	9a08      	ldr	r2, [sp, #32]
 8006098:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800609c:	446a      	add	r2, sp
 800609e:	3a98      	subs	r2, #152	; 0x98
 80060a0:	9208      	str	r2, [sp, #32]
 80060a2:	9a06      	ldr	r2, [sp, #24]
 80060a4:	a920      	add	r1, sp, #128	; 0x80
 80060a6:	18a2      	adds	r2, r4, r2
 80060a8:	18e3      	adds	r3, r4, r3
 80060aa:	f104 0801 	add.w	r8, r4, #1
 80060ae:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80060b2:	9302      	str	r3, [sp, #8]
 80060b4:	9b02      	ldr	r3, [sp, #8]
 80060b6:	4543      	cmp	r3, r8
 80060b8:	da04      	bge.n	80060c4 <__kernel_rem_pio2+0x3ac>
 80060ba:	461c      	mov	r4, r3
 80060bc:	e6a2      	b.n	8005e04 <__kernel_rem_pio2+0xec>
 80060be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060c0:	2301      	movs	r3, #1
 80060c2:	e7e4      	b.n	800608e <__kernel_rem_pio2+0x376>
 80060c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060c6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80060ca:	f7fa f9eb 	bl	80004a4 <__aeabi_i2d>
 80060ce:	e8e5 0102 	strd	r0, r1, [r5], #8
 80060d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d4:	46ab      	mov	fp, r5
 80060d6:	461c      	mov	r4, r3
 80060d8:	f04f 0900 	mov.w	r9, #0
 80060dc:	2600      	movs	r6, #0
 80060de:	2700      	movs	r7, #0
 80060e0:	9b05      	ldr	r3, [sp, #20]
 80060e2:	4599      	cmp	r9, r3
 80060e4:	dd06      	ble.n	80060f4 <__kernel_rem_pio2+0x3dc>
 80060e6:	9b08      	ldr	r3, [sp, #32]
 80060e8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80060ec:	f108 0801 	add.w	r8, r8, #1
 80060f0:	9308      	str	r3, [sp, #32]
 80060f2:	e7df      	b.n	80060b4 <__kernel_rem_pio2+0x39c>
 80060f4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80060f8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80060fc:	f7fa fa3c 	bl	8000578 <__aeabi_dmul>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	4630      	mov	r0, r6
 8006106:	4639      	mov	r1, r7
 8006108:	f7fa f880 	bl	800020c <__adddf3>
 800610c:	f109 0901 	add.w	r9, r9, #1
 8006110:	4606      	mov	r6, r0
 8006112:	460f      	mov	r7, r1
 8006114:	e7e4      	b.n	80060e0 <__kernel_rem_pio2+0x3c8>
 8006116:	3d01      	subs	r5, #1
 8006118:	e747      	b.n	8005faa <__kernel_rem_pio2+0x292>
 800611a:	ec47 6b10 	vmov	d0, r6, r7
 800611e:	f1ca 0000 	rsb	r0, sl, #0
 8006122:	f000 f949 	bl	80063b8 <scalbn>
 8006126:	ec57 6b10 	vmov	r6, r7, d0
 800612a:	4ba0      	ldr	r3, [pc, #640]	; (80063ac <__kernel_rem_pio2+0x694>)
 800612c:	ee10 0a10 	vmov	r0, s0
 8006130:	2200      	movs	r2, #0
 8006132:	4639      	mov	r1, r7
 8006134:	f7fa fca6 	bl	8000a84 <__aeabi_dcmpge>
 8006138:	b1f8      	cbz	r0, 800617a <__kernel_rem_pio2+0x462>
 800613a:	4b9d      	ldr	r3, [pc, #628]	; (80063b0 <__kernel_rem_pio2+0x698>)
 800613c:	2200      	movs	r2, #0
 800613e:	4630      	mov	r0, r6
 8006140:	4639      	mov	r1, r7
 8006142:	f7fa fa19 	bl	8000578 <__aeabi_dmul>
 8006146:	f7fa fcb1 	bl	8000aac <__aeabi_d2iz>
 800614a:	4680      	mov	r8, r0
 800614c:	f7fa f9aa 	bl	80004a4 <__aeabi_i2d>
 8006150:	4b96      	ldr	r3, [pc, #600]	; (80063ac <__kernel_rem_pio2+0x694>)
 8006152:	2200      	movs	r2, #0
 8006154:	f7fa fa10 	bl	8000578 <__aeabi_dmul>
 8006158:	460b      	mov	r3, r1
 800615a:	4602      	mov	r2, r0
 800615c:	4639      	mov	r1, r7
 800615e:	4630      	mov	r0, r6
 8006160:	f7fa f852 	bl	8000208 <__aeabi_dsub>
 8006164:	f7fa fca2 	bl	8000aac <__aeabi_d2iz>
 8006168:	1c65      	adds	r5, r4, #1
 800616a:	ab0c      	add	r3, sp, #48	; 0x30
 800616c:	f10a 0a18 	add.w	sl, sl, #24
 8006170:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006174:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006178:	e71f      	b.n	8005fba <__kernel_rem_pio2+0x2a2>
 800617a:	4630      	mov	r0, r6
 800617c:	4639      	mov	r1, r7
 800617e:	f7fa fc95 	bl	8000aac <__aeabi_d2iz>
 8006182:	ab0c      	add	r3, sp, #48	; 0x30
 8006184:	4625      	mov	r5, r4
 8006186:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800618a:	e716      	b.n	8005fba <__kernel_rem_pio2+0x2a2>
 800618c:	ab0c      	add	r3, sp, #48	; 0x30
 800618e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006192:	f7fa f987 	bl	80004a4 <__aeabi_i2d>
 8006196:	4632      	mov	r2, r6
 8006198:	463b      	mov	r3, r7
 800619a:	f7fa f9ed 	bl	8000578 <__aeabi_dmul>
 800619e:	4642      	mov	r2, r8
 80061a0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80061a4:	464b      	mov	r3, r9
 80061a6:	4630      	mov	r0, r6
 80061a8:	4639      	mov	r1, r7
 80061aa:	f7fa f9e5 	bl	8000578 <__aeabi_dmul>
 80061ae:	3c01      	subs	r4, #1
 80061b0:	4606      	mov	r6, r0
 80061b2:	460f      	mov	r7, r1
 80061b4:	e713      	b.n	8005fde <__kernel_rem_pio2+0x2c6>
 80061b6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80061ba:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80061be:	f7fa f9db 	bl	8000578 <__aeabi_dmul>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4648      	mov	r0, r9
 80061c8:	4651      	mov	r1, sl
 80061ca:	f7fa f81f 	bl	800020c <__adddf3>
 80061ce:	3701      	adds	r7, #1
 80061d0:	4681      	mov	r9, r0
 80061d2:	468a      	mov	sl, r1
 80061d4:	9b00      	ldr	r3, [sp, #0]
 80061d6:	429f      	cmp	r7, r3
 80061d8:	dc02      	bgt.n	80061e0 <__kernel_rem_pio2+0x4c8>
 80061da:	9b06      	ldr	r3, [sp, #24]
 80061dc:	429f      	cmp	r7, r3
 80061de:	ddea      	ble.n	80061b6 <__kernel_rem_pio2+0x49e>
 80061e0:	9a06      	ldr	r2, [sp, #24]
 80061e2:	ab48      	add	r3, sp, #288	; 0x120
 80061e4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80061e8:	e9c6 9a00 	strd	r9, sl, [r6]
 80061ec:	3c01      	subs	r4, #1
 80061ee:	e6fa      	b.n	8005fe6 <__kernel_rem_pio2+0x2ce>
 80061f0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	dc0b      	bgt.n	800620e <__kernel_rem_pio2+0x4f6>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	dc39      	bgt.n	800626e <__kernel_rem_pio2+0x556>
 80061fa:	d05d      	beq.n	80062b8 <__kernel_rem_pio2+0x5a0>
 80061fc:	9b02      	ldr	r3, [sp, #8]
 80061fe:	f003 0007 	and.w	r0, r3, #7
 8006202:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006206:	ecbd 8b02 	vpop	{d8}
 800620a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006210:	2b03      	cmp	r3, #3
 8006212:	d1f3      	bne.n	80061fc <__kernel_rem_pio2+0x4e4>
 8006214:	9b05      	ldr	r3, [sp, #20]
 8006216:	9500      	str	r5, [sp, #0]
 8006218:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800621c:	eb0d 0403 	add.w	r4, sp, r3
 8006220:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8006224:	46a2      	mov	sl, r4
 8006226:	9b00      	ldr	r3, [sp, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	f1aa 0a08 	sub.w	sl, sl, #8
 800622e:	dc69      	bgt.n	8006304 <__kernel_rem_pio2+0x5ec>
 8006230:	46aa      	mov	sl, r5
 8006232:	f1ba 0f01 	cmp.w	sl, #1
 8006236:	f1a4 0408 	sub.w	r4, r4, #8
 800623a:	f300 8083 	bgt.w	8006344 <__kernel_rem_pio2+0x62c>
 800623e:	9c05      	ldr	r4, [sp, #20]
 8006240:	ab48      	add	r3, sp, #288	; 0x120
 8006242:	441c      	add	r4, r3
 8006244:	2000      	movs	r0, #0
 8006246:	2100      	movs	r1, #0
 8006248:	2d01      	cmp	r5, #1
 800624a:	f300 809a 	bgt.w	8006382 <__kernel_rem_pio2+0x66a>
 800624e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8006252:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006256:	f1bb 0f00 	cmp.w	fp, #0
 800625a:	f040 8098 	bne.w	800638e <__kernel_rem_pio2+0x676>
 800625e:	9b04      	ldr	r3, [sp, #16]
 8006260:	e9c3 7800 	strd	r7, r8, [r3]
 8006264:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006268:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800626c:	e7c6      	b.n	80061fc <__kernel_rem_pio2+0x4e4>
 800626e:	9e05      	ldr	r6, [sp, #20]
 8006270:	ab48      	add	r3, sp, #288	; 0x120
 8006272:	441e      	add	r6, r3
 8006274:	462c      	mov	r4, r5
 8006276:	2000      	movs	r0, #0
 8006278:	2100      	movs	r1, #0
 800627a:	2c00      	cmp	r4, #0
 800627c:	da33      	bge.n	80062e6 <__kernel_rem_pio2+0x5ce>
 800627e:	f1bb 0f00 	cmp.w	fp, #0
 8006282:	d036      	beq.n	80062f2 <__kernel_rem_pio2+0x5da>
 8006284:	4602      	mov	r2, r0
 8006286:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800628a:	9c04      	ldr	r4, [sp, #16]
 800628c:	e9c4 2300 	strd	r2, r3, [r4]
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006298:	f7f9 ffb6 	bl	8000208 <__aeabi_dsub>
 800629c:	ae4a      	add	r6, sp, #296	; 0x128
 800629e:	2401      	movs	r4, #1
 80062a0:	42a5      	cmp	r5, r4
 80062a2:	da29      	bge.n	80062f8 <__kernel_rem_pio2+0x5e0>
 80062a4:	f1bb 0f00 	cmp.w	fp, #0
 80062a8:	d002      	beq.n	80062b0 <__kernel_rem_pio2+0x598>
 80062aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062ae:	4619      	mov	r1, r3
 80062b0:	9b04      	ldr	r3, [sp, #16]
 80062b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80062b6:	e7a1      	b.n	80061fc <__kernel_rem_pio2+0x4e4>
 80062b8:	9c05      	ldr	r4, [sp, #20]
 80062ba:	ab48      	add	r3, sp, #288	; 0x120
 80062bc:	441c      	add	r4, r3
 80062be:	2000      	movs	r0, #0
 80062c0:	2100      	movs	r1, #0
 80062c2:	2d00      	cmp	r5, #0
 80062c4:	da09      	bge.n	80062da <__kernel_rem_pio2+0x5c2>
 80062c6:	f1bb 0f00 	cmp.w	fp, #0
 80062ca:	d002      	beq.n	80062d2 <__kernel_rem_pio2+0x5ba>
 80062cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062d0:	4619      	mov	r1, r3
 80062d2:	9b04      	ldr	r3, [sp, #16]
 80062d4:	e9c3 0100 	strd	r0, r1, [r3]
 80062d8:	e790      	b.n	80061fc <__kernel_rem_pio2+0x4e4>
 80062da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80062de:	f7f9 ff95 	bl	800020c <__adddf3>
 80062e2:	3d01      	subs	r5, #1
 80062e4:	e7ed      	b.n	80062c2 <__kernel_rem_pio2+0x5aa>
 80062e6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80062ea:	f7f9 ff8f 	bl	800020c <__adddf3>
 80062ee:	3c01      	subs	r4, #1
 80062f0:	e7c3      	b.n	800627a <__kernel_rem_pio2+0x562>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	e7c8      	b.n	800628a <__kernel_rem_pio2+0x572>
 80062f8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80062fc:	f7f9 ff86 	bl	800020c <__adddf3>
 8006300:	3401      	adds	r4, #1
 8006302:	e7cd      	b.n	80062a0 <__kernel_rem_pio2+0x588>
 8006304:	e9da 8900 	ldrd	r8, r9, [sl]
 8006308:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800630c:	9b00      	ldr	r3, [sp, #0]
 800630e:	3b01      	subs	r3, #1
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	4632      	mov	r2, r6
 8006314:	463b      	mov	r3, r7
 8006316:	4640      	mov	r0, r8
 8006318:	4649      	mov	r1, r9
 800631a:	f7f9 ff77 	bl	800020c <__adddf3>
 800631e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	4640      	mov	r0, r8
 8006328:	4649      	mov	r1, r9
 800632a:	f7f9 ff6d 	bl	8000208 <__aeabi_dsub>
 800632e:	4632      	mov	r2, r6
 8006330:	463b      	mov	r3, r7
 8006332:	f7f9 ff6b 	bl	800020c <__adddf3>
 8006336:	ed9d 7b06 	vldr	d7, [sp, #24]
 800633a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800633e:	ed8a 7b00 	vstr	d7, [sl]
 8006342:	e770      	b.n	8006226 <__kernel_rem_pio2+0x50e>
 8006344:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006348:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800634c:	4640      	mov	r0, r8
 800634e:	4632      	mov	r2, r6
 8006350:	463b      	mov	r3, r7
 8006352:	4649      	mov	r1, r9
 8006354:	f7f9 ff5a 	bl	800020c <__adddf3>
 8006358:	e9cd 0100 	strd	r0, r1, [sp]
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4640      	mov	r0, r8
 8006362:	4649      	mov	r1, r9
 8006364:	f7f9 ff50 	bl	8000208 <__aeabi_dsub>
 8006368:	4632      	mov	r2, r6
 800636a:	463b      	mov	r3, r7
 800636c:	f7f9 ff4e 	bl	800020c <__adddf3>
 8006370:	ed9d 7b00 	vldr	d7, [sp]
 8006374:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006378:	ed84 7b00 	vstr	d7, [r4]
 800637c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006380:	e757      	b.n	8006232 <__kernel_rem_pio2+0x51a>
 8006382:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006386:	f7f9 ff41 	bl	800020c <__adddf3>
 800638a:	3d01      	subs	r5, #1
 800638c:	e75c      	b.n	8006248 <__kernel_rem_pio2+0x530>
 800638e:	9b04      	ldr	r3, [sp, #16]
 8006390:	9a04      	ldr	r2, [sp, #16]
 8006392:	601f      	str	r7, [r3, #0]
 8006394:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006398:	605c      	str	r4, [r3, #4]
 800639a:	609d      	str	r5, [r3, #8]
 800639c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80063a0:	60d3      	str	r3, [r2, #12]
 80063a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063a6:	6110      	str	r0, [r2, #16]
 80063a8:	6153      	str	r3, [r2, #20]
 80063aa:	e727      	b.n	80061fc <__kernel_rem_pio2+0x4e4>
 80063ac:	41700000 	.word	0x41700000
 80063b0:	3e700000 	.word	0x3e700000
 80063b4:	00000000 	.word	0x00000000

080063b8 <scalbn>:
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	ec55 4b10 	vmov	r4, r5, d0
 80063be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80063c2:	4606      	mov	r6, r0
 80063c4:	462b      	mov	r3, r5
 80063c6:	b999      	cbnz	r1, 80063f0 <scalbn+0x38>
 80063c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80063cc:	4323      	orrs	r3, r4
 80063ce:	d03f      	beq.n	8006450 <scalbn+0x98>
 80063d0:	4b35      	ldr	r3, [pc, #212]	; (80064a8 <scalbn+0xf0>)
 80063d2:	4629      	mov	r1, r5
 80063d4:	ee10 0a10 	vmov	r0, s0
 80063d8:	2200      	movs	r2, #0
 80063da:	f7fa f8cd 	bl	8000578 <__aeabi_dmul>
 80063de:	4b33      	ldr	r3, [pc, #204]	; (80064ac <scalbn+0xf4>)
 80063e0:	429e      	cmp	r6, r3
 80063e2:	4604      	mov	r4, r0
 80063e4:	460d      	mov	r5, r1
 80063e6:	da10      	bge.n	800640a <scalbn+0x52>
 80063e8:	a327      	add	r3, pc, #156	; (adr r3, 8006488 <scalbn+0xd0>)
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	e01f      	b.n	8006430 <scalbn+0x78>
 80063f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80063f4:	4291      	cmp	r1, r2
 80063f6:	d10c      	bne.n	8006412 <scalbn+0x5a>
 80063f8:	ee10 2a10 	vmov	r2, s0
 80063fc:	4620      	mov	r0, r4
 80063fe:	4629      	mov	r1, r5
 8006400:	f7f9 ff04 	bl	800020c <__adddf3>
 8006404:	4604      	mov	r4, r0
 8006406:	460d      	mov	r5, r1
 8006408:	e022      	b.n	8006450 <scalbn+0x98>
 800640a:	460b      	mov	r3, r1
 800640c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006410:	3936      	subs	r1, #54	; 0x36
 8006412:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006416:	4296      	cmp	r6, r2
 8006418:	dd0d      	ble.n	8006436 <scalbn+0x7e>
 800641a:	2d00      	cmp	r5, #0
 800641c:	a11c      	add	r1, pc, #112	; (adr r1, 8006490 <scalbn+0xd8>)
 800641e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006422:	da02      	bge.n	800642a <scalbn+0x72>
 8006424:	a11c      	add	r1, pc, #112	; (adr r1, 8006498 <scalbn+0xe0>)
 8006426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800642a:	a319      	add	r3, pc, #100	; (adr r3, 8006490 <scalbn+0xd8>)
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	f7fa f8a2 	bl	8000578 <__aeabi_dmul>
 8006434:	e7e6      	b.n	8006404 <scalbn+0x4c>
 8006436:	1872      	adds	r2, r6, r1
 8006438:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800643c:	428a      	cmp	r2, r1
 800643e:	dcec      	bgt.n	800641a <scalbn+0x62>
 8006440:	2a00      	cmp	r2, #0
 8006442:	dd08      	ble.n	8006456 <scalbn+0x9e>
 8006444:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006448:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800644c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006450:	ec45 4b10 	vmov	d0, r4, r5
 8006454:	bd70      	pop	{r4, r5, r6, pc}
 8006456:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800645a:	da08      	bge.n	800646e <scalbn+0xb6>
 800645c:	2d00      	cmp	r5, #0
 800645e:	a10a      	add	r1, pc, #40	; (adr r1, 8006488 <scalbn+0xd0>)
 8006460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006464:	dac0      	bge.n	80063e8 <scalbn+0x30>
 8006466:	a10e      	add	r1, pc, #56	; (adr r1, 80064a0 <scalbn+0xe8>)
 8006468:	e9d1 0100 	ldrd	r0, r1, [r1]
 800646c:	e7bc      	b.n	80063e8 <scalbn+0x30>
 800646e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006472:	3236      	adds	r2, #54	; 0x36
 8006474:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006478:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800647c:	4620      	mov	r0, r4
 800647e:	4b0c      	ldr	r3, [pc, #48]	; (80064b0 <scalbn+0xf8>)
 8006480:	2200      	movs	r2, #0
 8006482:	e7d5      	b.n	8006430 <scalbn+0x78>
 8006484:	f3af 8000 	nop.w
 8006488:	c2f8f359 	.word	0xc2f8f359
 800648c:	01a56e1f 	.word	0x01a56e1f
 8006490:	8800759c 	.word	0x8800759c
 8006494:	7e37e43c 	.word	0x7e37e43c
 8006498:	8800759c 	.word	0x8800759c
 800649c:	fe37e43c 	.word	0xfe37e43c
 80064a0:	c2f8f359 	.word	0xc2f8f359
 80064a4:	81a56e1f 	.word	0x81a56e1f
 80064a8:	43500000 	.word	0x43500000
 80064ac:	ffff3cb0 	.word	0xffff3cb0
 80064b0:	3c900000 	.word	0x3c900000
 80064b4:	00000000 	.word	0x00000000

080064b8 <floor>:
 80064b8:	ec51 0b10 	vmov	r0, r1, d0
 80064bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80064c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80064c8:	2e13      	cmp	r6, #19
 80064ca:	ee10 5a10 	vmov	r5, s0
 80064ce:	ee10 8a10 	vmov	r8, s0
 80064d2:	460c      	mov	r4, r1
 80064d4:	dc31      	bgt.n	800653a <floor+0x82>
 80064d6:	2e00      	cmp	r6, #0
 80064d8:	da14      	bge.n	8006504 <floor+0x4c>
 80064da:	a333      	add	r3, pc, #204	; (adr r3, 80065a8 <floor+0xf0>)
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	f7f9 fe94 	bl	800020c <__adddf3>
 80064e4:	2200      	movs	r2, #0
 80064e6:	2300      	movs	r3, #0
 80064e8:	f7fa fad6 	bl	8000a98 <__aeabi_dcmpgt>
 80064ec:	b138      	cbz	r0, 80064fe <floor+0x46>
 80064ee:	2c00      	cmp	r4, #0
 80064f0:	da53      	bge.n	800659a <floor+0xe2>
 80064f2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80064f6:	4325      	orrs	r5, r4
 80064f8:	d052      	beq.n	80065a0 <floor+0xe8>
 80064fa:	4c2d      	ldr	r4, [pc, #180]	; (80065b0 <floor+0xf8>)
 80064fc:	2500      	movs	r5, #0
 80064fe:	4621      	mov	r1, r4
 8006500:	4628      	mov	r0, r5
 8006502:	e024      	b.n	800654e <floor+0x96>
 8006504:	4f2b      	ldr	r7, [pc, #172]	; (80065b4 <floor+0xfc>)
 8006506:	4137      	asrs	r7, r6
 8006508:	ea01 0307 	and.w	r3, r1, r7
 800650c:	4303      	orrs	r3, r0
 800650e:	d01e      	beq.n	800654e <floor+0x96>
 8006510:	a325      	add	r3, pc, #148	; (adr r3, 80065a8 <floor+0xf0>)
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	f7f9 fe79 	bl	800020c <__adddf3>
 800651a:	2200      	movs	r2, #0
 800651c:	2300      	movs	r3, #0
 800651e:	f7fa fabb 	bl	8000a98 <__aeabi_dcmpgt>
 8006522:	2800      	cmp	r0, #0
 8006524:	d0eb      	beq.n	80064fe <floor+0x46>
 8006526:	2c00      	cmp	r4, #0
 8006528:	bfbe      	ittt	lt
 800652a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800652e:	4133      	asrlt	r3, r6
 8006530:	18e4      	addlt	r4, r4, r3
 8006532:	ea24 0407 	bic.w	r4, r4, r7
 8006536:	2500      	movs	r5, #0
 8006538:	e7e1      	b.n	80064fe <floor+0x46>
 800653a:	2e33      	cmp	r6, #51	; 0x33
 800653c:	dd0b      	ble.n	8006556 <floor+0x9e>
 800653e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006542:	d104      	bne.n	800654e <floor+0x96>
 8006544:	ee10 2a10 	vmov	r2, s0
 8006548:	460b      	mov	r3, r1
 800654a:	f7f9 fe5f 	bl	800020c <__adddf3>
 800654e:	ec41 0b10 	vmov	d0, r0, r1
 8006552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006556:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800655a:	f04f 37ff 	mov.w	r7, #4294967295
 800655e:	40df      	lsrs	r7, r3
 8006560:	4238      	tst	r0, r7
 8006562:	d0f4      	beq.n	800654e <floor+0x96>
 8006564:	a310      	add	r3, pc, #64	; (adr r3, 80065a8 <floor+0xf0>)
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	f7f9 fe4f 	bl	800020c <__adddf3>
 800656e:	2200      	movs	r2, #0
 8006570:	2300      	movs	r3, #0
 8006572:	f7fa fa91 	bl	8000a98 <__aeabi_dcmpgt>
 8006576:	2800      	cmp	r0, #0
 8006578:	d0c1      	beq.n	80064fe <floor+0x46>
 800657a:	2c00      	cmp	r4, #0
 800657c:	da0a      	bge.n	8006594 <floor+0xdc>
 800657e:	2e14      	cmp	r6, #20
 8006580:	d101      	bne.n	8006586 <floor+0xce>
 8006582:	3401      	adds	r4, #1
 8006584:	e006      	b.n	8006594 <floor+0xdc>
 8006586:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800658a:	2301      	movs	r3, #1
 800658c:	40b3      	lsls	r3, r6
 800658e:	441d      	add	r5, r3
 8006590:	45a8      	cmp	r8, r5
 8006592:	d8f6      	bhi.n	8006582 <floor+0xca>
 8006594:	ea25 0507 	bic.w	r5, r5, r7
 8006598:	e7b1      	b.n	80064fe <floor+0x46>
 800659a:	2500      	movs	r5, #0
 800659c:	462c      	mov	r4, r5
 800659e:	e7ae      	b.n	80064fe <floor+0x46>
 80065a0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80065a4:	e7ab      	b.n	80064fe <floor+0x46>
 80065a6:	bf00      	nop
 80065a8:	8800759c 	.word	0x8800759c
 80065ac:	7e37e43c 	.word	0x7e37e43c
 80065b0:	bff00000 	.word	0xbff00000
 80065b4:	000fffff 	.word	0x000fffff

080065b8 <_init>:
 80065b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ba:	bf00      	nop
 80065bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065be:	bc08      	pop	{r3}
 80065c0:	469e      	mov	lr, r3
 80065c2:	4770      	bx	lr

080065c4 <_fini>:
 80065c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c6:	bf00      	nop
 80065c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ca:	bc08      	pop	{r3}
 80065cc:	469e      	mov	lr, r3
 80065ce:	4770      	bx	lr
